pData(msd_subset)$AgeFactor == unique(age_factor)[per_age_group] ] )
topics_plot <- topics_per_country[[per_age_group]][[per_clust]]
clust <- topics_plot$K
docweights <- topics_plot$omega
type_ordered <- type_info[order(type_info[,1], type_info[,2]), ]
docweights_ordered <- docweights[order(type_info[,1], type_info[,2]),]
barplot( t(docweights_ordered),
col = 2:(clust+1), axisnames = F,
space = 0, border=NA,
main = paste("No. of clusters=", clust), las = 1,
ylim = c(0,1), cex.axis = 0.3, cex.main=1.4)
labels <- match(unique(type_ordered[,1]), type_ordered[,1])
abline(v=labels-1, lwd =3)
labels_low <- labels-1
labels_up <- c(labels_low[2:length(labels_low)], dim(docweights_ordered)[1])
mid_point <- labels_low +0.5*(labels_up-labels_low)
axis(1, at = mid_point, unique(type_ordered[,1]), las = 2, cex.axis=0.3)
library(metagenomeSeq)
library(maptpx)
#library(tsne)))
#library(qtlcharts)
#library(qvalue)
library(lda)
load('./data/HMPvs35_nt100_MRexperiment.rdata')
hmp <- filterData(hmp, present=10)
counts <- t(MRcounts(hmp, norm=TRUE, log = FALSE))
metadata <- pData(hmp)
otu_data <- featureData(hmp)
counts_crease <- counts[which(metadata$HMPbodysubsite=="Right_Retroauricular_crease" |
metadata$HMPbodysubsite=="Left_Retroauricular_crease"), ]
metadata_crease <- metadata[which(metadata$HMPbodysubsite=="Right_Retroauricular_crease" |
metadata$HMPbodysubsite=="Left_Retroauricular_crease"), ]
table(metadata_crease$HMPbodysubsite)
person_label <- sapply(1:dim(metadata_crease)[1], function(x)
strsplit( metadata_crease$Description[x],"_")[[1]][8] )
# Compare hostsubject id and also description
which(person_label == "763435843")
cbind(person_label, metadata_crease$hostsubjectid)[c(1,156), ]
length(unique(metadata_crease$hostsubjectid))
length(unique(person_label))
## Choose only samples with 1 or 0 link in the data
input_link <- lapply(1:length(metadata_crease$hostsubjectid), function(per_person) {
id <- metadata_crease$hostsubjectid[per_person]
exp <- metadata_crease$EXPERIMENTACCESSION[per_person]
pair <- which(metadata_crease$hostsubjectid == id)
pair[pair != per_person]
})
ii_subset <- which(sapply(input_link, function(xx) length(xx) < 2))
# counts entry needs to be a list
counts_crease <- round(counts_crease)
counts_crease_subset <- counts_crease[ii_subset, ]
metadata_crease_subset <- metadata_crease[ii_subset, ]
input_crease_subset <- lapply(1:nrow(counts_crease_subset), function(per_person) {
rbind(as.integer( c(0: (ncol(counts_crease_subset) - 1 ) ) ),
as.integer(counts_crease_subset[per_person, ] ) )
})
input_link_subset <- lapply(1:length(metadata_crease_subset$hostsubjectid), function(per_person) {
id <- metadata_crease_subset$hostsubjectid[per_person]
exp <- metadata_crease_subset$EXPERIMENTACCESSION[per_person]
pair <- which(metadata_crease_subset$hostsubjectid == id)
as.integer(pair[pair != per_person] - 1)
})
input_genes <- colnames(counts_crease_subset)
stopifnot (max(unlist(input_link_subset)) == length(input_crease_subset) - 1)
stopifnot( min(unlist(input_link_subset)) == 0)
stopifnot( min(input_crease_subset[[1]] )  == 0)
if (!file.exists("./rdas/relation-topics-hmp.rda")) {
rtm.model <- lapply(2:5, function(per_clust) {
rtm.collapsed.gibbs.sampler(input_crease_subset,
input_link_subset,
per_clust,
vocab = input_genes,
num.iterations = 35,
alpha = 0.1,
eta = 0.1, beta = 3)
})
save(rtm.model, file = "./rdas/relation-topic-hmp.rda")
} else {
load("./rdas/relation-topic-hmp.rda")
}
# document_sums: each entry is a numeric proportional
# to the probability of seeing a topic (row) conditioned on the document column
topic_probs <- lapply(1:length(rtm.model), function(per_clust) {
t(t(rtm.model[[per_clust]]$document_sums)/
colSums(rtm.model[[per_clust]]$document_sums))
})
dim(topic_probs[[1]])
# Find the maximum topic probability for each document
ii_topic <- apply(rtm.model[[1]]$document_sums, 2, which.max)
nclust <- 2:5
ii_order <- order(metadata_crease_subset$hostsubjectid)
for (per_clust in 1:1) {
clust <- nclust[per_clust]
docweights <- topic_probs[[per_clust]]
#ii_order <- order(docweights[1, ], docweights[2, ])
docweights_ordered <- docweights[ , ii_order]
barplot( docweights_ordered,
col = 2:(clust+1), axisnames = F,
space = 0, border=NA,
main = paste("No. of clusters=", clust), las = 1,
ylim = c(0,1), cex.axis = 0.3, cex.main=1.4)
#      labels <- match(unique(type_ordered[,1]), type_ordered[,1])
#       abline(v=labels-1, lwd =3)
#       labels_low <- labels-1
#       labels_up <- c(labels_low[2:length(labels_low)], dim(docweights_ordered)[1])
#       mid_point <- labels_low +0.5*(labels_up-labels_low)
#       axis(1, at = mid_point, unique(type_ordered[,1]), las = 2, cex.axis=0.3)
}
table(metadata_crease_subset, ii_topic)
table(metadata_crease_subset$hostsubjectid, ii_topic)
topic_matc <- table(metadata_crease_subset$hostsubjectid, ii_topic)
unique_subject <- unique(metadata_crease_subset$hostsubjectid)
topic_match[which(rownames(topic_match) %in% unique_subject), ]
topic_match <- table(metadata_crease_subset$hostsubjectid, ii_topic)
unique_subject <- unique(metadata_crease_subset$hostsubjectid)
topic_match[which(rownames(topic_match) %in% unique_subject), ]
table(metadata_crease_subset$hostsubjectid)
unique_subject <- table(metadata_crease_subset$hostsubjectid)
unique_subject <- names(unique_subject)[unique_subject==2]
unique_subject
topic_match[which(rownames(topic_match) %in% unique_subject), ]
topic_match_sort <- lapply(unique_subject, function(xx) {
topic_match[which(rownames(topic_match) %in% xx), ]
})
topic_match_sort[[1]]
topic_match_sort[[2]]
topic_match_sort[[3]]
ii_topic <- apply(rtm.model[[1]]$document_sums, 2, which.max)
ii_topic
topic_match
ii_topic <- apply(rtm.model[[1]]$document_sums, 2, which.max)
unique_subject <- table(metadata_crease_subset$hostsubjectid)
unique_subject <- names(unique_subject)[unique_subject==2]
ii_topic
subjects <- metadata_crease_subset
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx), ]
ii_topic[ii_subject]
})
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
topic_match_sort
unique_subject
subjects <- metadata_crease_subset$hostsubjectid
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
topic_match_sort
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
library(qtlcharts)
pr <- prcomp(counts_crease_subset %*% t(counts_crease_subset) )
iplot(pr$x[,1], pr$x[,2], as.numeric(as.factor(metadata_crease_subset$hostsubjectid)),
metadata_crease_subset$hostsubjectid)) )
iplot(pr$x[,1], pr$x[,2], as.numeric(as.factor(metadata_crease_subset$hostsubjectid)),
metadata_crease_subset$hostsubjectid)
pr <- prcomp(log2(counts_crease_subset+1) %*% t(log2(counts_crease_subset+1)) )
iplot(pr$x[,1], pr$x[,2], as.numeric(as.factor(metadata_crease_subset$hostsubjectid)),
metadata_crease_subset$hostsubjectid)
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
topic_match_sort
ii_topic <- apply(rtm.model[[4]]$document_sums, 2, which.max)
unique_subject <- table(metadata_crease_subset$hostsubjectid)
unique_subject <- names(unique_subject)[unique_subject==2]
subjects <- metadata_crease_subset$hostsubjectid
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
topic_match_sort
ii_match <- sapply(topic_match_sort, function(xx) xx[1] == xx[2])
ii_match
ii_match <- table(sapply(topic_match_sort, function(xx) xx[1] == xx[2]))
table(sapply(topic_match_sort, function(xx) xx[1] == xx[2]))
# Find the maximum topic probability for each document
ii_topic <- apply(rtm.model[[1]]$document_sums, 2, which.max)
unique_subject <- table(metadata_crease_subset$hostsubjectid)
unique_subject <- names(unique_subject)[unique_subject==2]
subjects <- metadata_crease_subset$hostsubjectid
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
topic_match_sort
table(sapply(topic_match_sort, function(xx) xx[1] == xx[2]))
# Find the maximum topic probability for each document
ii_topic <- apply(rtm.model[[4]]$document_sums, 2, which.max)
unique_subject <- table(metadata_crease_subset$hostsubjectid)
unique_subject <- names(unique_subject)[unique_subject==2]
subjects <- metadata_crease_subset$hostsubjectid
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
topic_match_sort
table(sapply(topic_match_sort, function(xx) xx[1] == xx[2]))
# Find the maximum topic probability for each document
ii_topic <- apply(rtm.model[[1]]$document_sums, 2, which.max)
unique_subject <- table(metadata_crease_subset$hostsubjectid)
unique_subject <- names(unique_subject)[unique_subject==2]
subjects <- metadata_crease_subset$hostsubjectid
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
topic_match_sort
table(sapply(topic_match_sort, function(xx) xx[1] == xx[2]))
getwd()
load(file = "/primate_ribo/manuscript/genelist/genelist.rda")
getwd()
load(file = "~Dropbox/primate_ribo/manuscript/genelist/genelist.rda")
load(file = "~/Dropbox/primate_ribo/manuscript/genelist/genelist.rda")
load(file = "~/Dropbox/manuscript/genelist/genelist.rda")
head(mat.ribopro)
dim(mat.ribopro)
View(mat.DD)
library(metagenomeSeq)
library(maptpx)
#library(tsne)))
#library(qtlcharts)
#library(qvalue)
library(lda)
load(file = '../data/HMPvs35_nt100_MRexperiment.rdata')
hmp <- filterData(hmp, present=10)
counts <- t(MRcounts(hmp, norm=TRUE, log = FALSE))
metadata <- pData(hmp)
otu_data <- featureData(hmp)
counts_crease <- counts[which(metadata$HMPbodysubsite=="Right_Retroauricular_crease" |
metadata$HMPbodysubsite=="Left_Retroauricular_crease"), ]
metadata_crease <- metadata[which(metadata$HMPbodysubsite=="Right_Retroauricular_crease" |
metadata$HMPbodysubsite=="Left_Retroauricular_crease"), ]
table(metadata_crease$HMPbodysubsite)
getwd()
load(file = '../data/HMPvs35_nt100_MRexperiment.rdata')
load(file = './data/HMPvs35_nt100_MRexperiment.rdata')
hmp <- filterData(hmp, present=10)
counts <- t(MRcounts(hmp, norm=TRUE, log = FALSE))
metadata <- pData(hmp)
otu_data <- featureData(hmp)
counts_crease <- counts[which(metadata$HMPbodysubsite=="Right_Retroauricular_crease" |
metadata$HMPbodysubsite=="Left_Retroauricular_crease"), ]
metadata_crease <- metadata[which(metadata$HMPbodysubsite=="Right_Retroauricular_crease" |
metadata$HMPbodysubsite=="Left_Retroauricular_crease"), ]
table(metadata_crease$HMPbodysubsite)
person_label <- sapply(1:dim(metadata_crease)[1], function(x)
strsplit( metadata_crease$Description[x],"_")[[1]][8] )
# Compare hostsubject id and also description
which(person_label == "763435843")
cbind(person_label, metadata_crease$hostsubjectid)[c(1,156), ]
length(unique(metadata_crease$hostsubjectid))
length(unique(person_label))
## Choose only samples with 1 or 0 link in the data
input_link <- lapply(1:length(metadata_crease$hostsubjectid), function(per_person) {
id <- metadata_crease$hostsubjectid[per_person]
exp <- metadata_crease$EXPERIMENTACCESSION[per_person]
pair <- which(metadata_crease$hostsubjectid == id)
pair[pair != per_person]
})
ii_subset <- which(sapply(input_link, function(xx) length(xx) < 2))
# counts entry needs to be a list
counts_crease <- round(counts_crease)
counts_crease_subset <- counts_crease[ii_subset, ]
metadata_crease_subset <- metadata_crease[ii_subset, ]
input_crease_subset <- lapply(1:nrow(counts_crease_subset), function(per_person) {
rbind(as.integer( c(0: (ncol(counts_crease_subset) - 1 ) ) ),
as.integer(counts_crease_subset[per_person, ] ) )
})
input_link_subset <- lapply(1:length(metadata_crease_subset$hostsubjectid), function(per_person) {
id <- metadata_crease_subset$hostsubjectid[per_person]
exp <- metadata_crease_subset$EXPERIMENTACCESSION[per_person]
pair <- which(metadata_crease_subset$hostsubjectid == id)
as.integer(pair[pair != per_person] - 1)
})
input_genes <- colnames(counts_crease_subset)
stopifnot (max(unlist(input_link_subset)) == length(input_crease_subset) - 1)
stopifnot( min(unlist(input_link_subset)) == 0)
stopifnot( min(input_crease_subset[[1]] )  == 0)
if (!file.exists("../rdas/relation-topics-hmp.rda")) {
rtm.model <- lapply(2:5, function(per_clust) {
rtm.collapsed.gibbs.sampler(input_crease_subset,
input_link_subset,
per_clust,
vocab = input_genes,
num.iterations = 35,
alpha = 0.1,
eta = 0.1, beta = 3)
})
save(rtm.model, file = "../rdas/relation-topic-hmp.rda")
} else {
load("../rdas/relation-topic-hmp.rda")
}
if (!file.exists("./rdas/relation-topics-hmp.rda")) {
rtm.model <- lapply(2:5, function(per_clust) {
rtm.collapsed.gibbs.sampler(input_crease_subset,
input_link_subset,
per_clust,
vocab = input_genes,
num.iterations = 35,
alpha = 0.1,
eta = 0.1, beta = 3)
})
save(rtm.model, file = "./rdas/relation-topic-hmp.rda")
} else {
load("./rdas/relation-topic-hmp.rda")
}
# document_sums: each entry is a numeric proportional
# to the probability of seeing a topic (row) conditioned on the document column
topic_probs <- lapply(1:length(rtm.model), function(per_clust) {
t(t(rtm.model[[per_clust]]$document_sums)/
colSums(rtm.model[[per_clust]]$document_sums))
})
dim(topic_probs[[1]])
# Find the maximum topic probability for each document
ii_topic <- apply(rtm.model[[1]]$document_sums, 2, which.max)
unique_subject <- table(metadata_crease_subset$hostsubjectid)
unique_subject <- names(unique_subject)[unique_subject==2]
subjects <- metadata_crease_subset$hostsubjectid
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
#topic_match_sort
table(sapply(topic_match_sort, function(xx) xx[1] == xx[2]))
demo(rtm)
sampled_edges <- edges[sample(dim(edges)[1], 100), ]
sampled_edges
edges <- link.as.edgelist(input_link_subset)
edges <- links.as.edgelist(input_link_subset)
head(edges)
## Compute the number of linked samples (edge) for each sample (node)
per_sample_edges <- table(factor(edges[ ,1],
levels = 1:dim(rtm.model[[1]]$document_sums)[2]) )
## Compute which gene (topic) is most expressed by the samples
max_gene <- apply(rtm.model[[1]]$document_sums, 2, which.max)
edges <- links.as.edgelist(input_link_subset)
sampled_edges <- edges[sample(dim(edges)[1], 100), ]
rtm.similarity <- predictive.link.probability(sampled_edges,
rtm.model[[1]]$document_sums,
0.1, 3)
length(rtm.model)
names(rtm.model[[1]])
str(rtm.model[[1]])
str(rtm.model)
length(rtm.model)
rtm.model[[1]]
length(rtm.model[[1]])
head(rtm.model[[1]])
topic_probs
rtm.model[[1]]$document_sums
topic_probs <- lapply(1:length(rtm.model), function(per_clust) {
t(t(rtm.model[[per_clust]]$document_sums)/
colSums(rtm.model[[per_clust]]$document_sums))
})
dim(topic_probs[[1]])
rtm.model[[1]]$document_sums
topic_probs
# Find the maximum topic probability for each document
ii_topic <- apply(rtm.model[[1]]$document_sums, 2, which.max)
unique_subject <- table(metadata_crease_subset$hostsubjectid)
unique_subject <- names(unique_subject)[unique_subject==2]
subjects <- metadata_crease_subset$hostsubjectid
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
#topic_match_sort
table(sapply(topic_match_sort, function(xx) xx[1] == xx[2]))
rtm.model[[1]]$document_sums
edges <- links.as.edgelist(input_link_subset)
sampled_edges <- edges[sample(dim(edges)[1], 100), ]
rtm.similarity <- predictive.link.probability(sampled_edges,
rtm.model[[1]]$document_sums,
0.1, 3)
rtm.model[[1]]
rtm.model <- lapply(2:5, function(per_clust) {
rtm.collapsed.gibbs.sampler(input_crease_subset,
input_link_subset,
per_clust,
vocab = input_genes,
num.iterations = 35,
alpha = 0.1,
eta = 0.1, beta = 3)
})
save(rtm.model, file = "./rdas/relation-topic-hmp.rda")
topic_probs <- lapply(1:length(rtm.model), function(per_clust) {
t(t(rtm.model[[per_clust]]$document_sums)/
colSums(rtm.model[[per_clust]]$document_sums))
})
dim(topic_probs[[1]])
# Find the maximum topic probability for each document
ii_topic <- apply(rtm.model[[1]]$document_sums, 2, which.max)
unique_subject <- table(metadata_crease_subset$hostsubjectid)
unique_subject <- names(unique_subject)[unique_subject==2]
subjects <- metadata_crease_subset$hostsubjectid
topic_match_sort <- lapply(unique_subject, function(xx) {
ii_subject <- which(subjects %in% xx)
ii_topic[ii_subject]
})
table(sapply(topic_match_sort, function(xx) xx[1] == xx[2]))
## Randomly sample 100 edges.
edges <- links.as.edgelist(input_link_subset)
sampled_edges <- edges[sample(dim(edges)[1], 100), ]
rtm.similarity <- predictive.link.probability(sampled_edges,
rtm.model$$document_sums,
0.1, 3)
## Randomly sample 100 edges.
edges <- links.as.edgelist(input_link_subset)
sampled_edges <- edges[sample(dim(edges)[1], 100), ]
rtm.similarity <- predictive.link.probability(sampled_edges,
rtm.model[[1]]$document_sums,
0.1, 3)
per_sample_edges <- table(factor(edges[ ,1],
levels = 1:dim(rtm.model[[1]]$document_sums)[2]) )
## Compute which gene (topic) is most expressed by the samples
max_gene <- apply(rtm.model[[1]]$document_sums, 2, which.max)
str(rtm.similarity)
rtm_similarity <- predictive.link.probability(sampled_edges,
rtm.model[[1]]$document_sums,
0.1, 3)
summary(rtm.similarity)
dim(edges)
head(edges)
dim(edges)
edges <- links.as.edgelist(input_link_subset)
rtm_similarity <- predictive.link.probability(edges,
rtm.model[[1]]$document_sums,
0.1, 3)
head(rtm_similarity)
unique(edges)
unique(c(edges))
str(input_link_subset[[1]])
input_link_subset
summary(unlist(input_link_subset))
per_sample_edges <- table(factor(edges[ ,1],
levels = 1:dim(rtm.model[[1]]$document_sums)[2]) )
)
summary(per_sample_edges)
per_sample_edges
boxplot(rtm_similarity)
ggplot(data.frame(rtm_similarity), aes(x)) + geom_boxplot()
qplot(data = data.frame(rtm_similarity), geom = "boxplot")
qplot(data = data.frame(x = 1, y = rtm_similarity), x = x, y = y, geom = "boxplot")
qplot(data = data.frame(x = 1, y = rtm_similarity), x = x, y = y, geom = "boxplot",
xlab = "",
ylab = "Probability of linkage between left and right hand of the same individual")
xlab = "",
ylab = "Probability of linkage between left and right hand of the same individual")
edges <- links.as.edgelist(input_link_subset)
rtm_similarity <- predictive.link.probability(edges,
rtm.model[[5]]$document_sums,
0.1, 3)
qplot(data = data.frame(x = 1, y = rtm_similarity), x = x, y = y, geom = "boxplot",
xlab = "",
ylab = "Probability of linkage between left
and right hand of the same individual")
library(metagenomeSeq)
library(maptpx)
#library(tsne)))
#library(qtlcharts)
#library(qvalue)
library(lda)
load(file = './data/HMPvs35_nt100_MRexperiment.rdata')
hmp <- filterData(hmp, present=10)
counts <- t(MRcounts(hmp, norm=TRUE, log = FALSE))
metadata <- pData(hmp)
otu_data <- featureData(hmp)
counts_crease <- counts[which(metadata$HMPbodysubsite=="Right_Retroauricular_crease" |
metadata$HMPbodysubsite=="Left_Retroauricular_crease"), ]
metadata_crease <- metadata[which(metadata$HMPbodysubsite=="Right_Retroauricular_crease" |
metadata$HMPbodysubsite=="Left_Retroauricular_crease"), ]
table(metadata_crease$HMPbodysubsite)
person_label <- sapply(1:dim(metadata_crease)[1], function(x)
strsplit( metadata_crease$Description[x],"_")[[1]][8] )
# Compare hostsubject id and also description
which(person_label == "763435843")
cbind(person_label, metadata_crease$hostsubjectid)[c(1,156), ]
length(unique(metadata_crease$hostsubjectid))
length(unique(person_label))
## Choose only samples with 1 or 0 link in the data
input_link <- lapply(1:length(metadata_crease$hostsubjectid), function(per_person) {
id <- metadata_crease$hostsubjectid[per_person]
exp <- metadata_crease$EXPERIMENTACCESSION[per_person]
pair <- which(metadata_crease$hostsubjectid == id)
pair[pair != per_person]
})
ii_subset <- which(sapply(input_link, function(xx) length(xx) < 2))
# counts entry needs to be a list
counts_crease <- round(counts_crease)
counts_crease_subset <- counts_crease[ii_subset, ]
metadata_crease_subset <- metadata_crease[ii_subset, ]
getwd()
data <- as.matrix(mtcars[,c(1,3)])
scale <- c(diff(range(data[,1])), diff(range(data[,2])))
t.data.scaled <- t(data)/scale
findClosest <- function(input) {
if (is.null(input$myplot1_click)) {
1
} else {
pt <- c(input$myplot1_click$x, y=input$myplot1_click$y)
sqdists <- colMeans( (t.data.scaled - pt/scale )^2 )
which.min(sqdists)
}
}
shiny::runApp('~/Desktop')
