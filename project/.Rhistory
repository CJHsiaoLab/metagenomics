data_vector <- sample(c(0,1,50), 100*100)
mat <- matrix(data_vector, 100, 100)
data_vector <- sample(c(0,1,50), 100*100, replace = TRUE)
mat <- matrix(data_vector, 100, 100)
library(ggplot2)
?findInterval
library(ggplot2)
library(reshape)
library(zoo)
## repeat random selection
set.seed(1)
## create 50x10 matrix of random values from [-1, +1]
random_matrix <- matrix(runif(500, min = -1, max = 1), nrow = 50)
## set color representation for specific values of the data distribution
quantile_range <- quantile(random_matrix, probs = seq(0, 1, 0.2))
## use http://colorbrewer2.org/ to find optimal divergent color palette (or set own)
color_palette <- colorRampPalette(c("#3794bf", "#FFFFFF", "#df8640"))(length(quantile_range) - 1)
## prepare label text (use two adjacent values for range text)
label_text <- rollapply(round(quantile_range, 2), width = 2, by = 1, FUN = function(i) paste(i, collapse = " : "))
## discretize matrix; this is the most important step, where for each value we find category of predefined ranges (modify probs argument of quantile to detail the colors)
mod_mat <- matrix(findInterval(random_matrix, quantile_range, all.inside = TRUE), nrow = nrow(random_matrix))
install.packages("reshape")
library(ggplot2)
library(reshape)
library(zoo)
## repeat random selection
set.seed(1)
## create 50x10 matrix of random values from [-1, +1]
random_matrix <- matrix(runif(500, min = -1, max = 1), nrow = 50)
## set color representation for specific values of the data distribution
quantile_range <- quantile(random_matrix, probs = seq(0, 1, 0.2))
## use http://colorbrewer2.org/ to find optimal divergent color palette (or set own)
color_palette <- colorRampPalette(c("#3794bf", "#FFFFFF", "#df8640"))(length(quantile_range) - 1)
## prepare label text (use two adjacent values for range text)
label_text <- rollapply(round(quantile_range, 2), width = 2, by = 1, FUN = function(i) paste(i, collapse = " : "))
## discretize matrix; this is the most important step, where for each value we find category of predefined ranges (modify probs argument of quantile to detail the colors)
mod_mat <- matrix(findInterval(random_matrix, quantile_range, all.inside = TRUE), nrow = nrow(random_matrix))
mod_mat
str(mod_mat)
color_pallette <- c("white", "blue", "red")
label_text <- paste0("Count", c(0, 1, 50))
label_text
label_text <- paste1("Count", c(0, 1, 50))
color_pallette <- c("white", "blue", "red")
label_text <- paste("Count", c(0, 1, 50), sep = " ")
ggplot(melt(mat), aes(x = X1, y = X2, fill = factor(value))) +
geom_tile(color = "black") +
scale_fill_manual(values = color_palette, name = "", labels = label_text)
color_palette <- c("white", "blue", "red")
label_text <- paste("Count", c(0, 1, 50), sep = " ")
ggplot(melt(mat), aes(x = X1, y = X2, fill = factor(value))) +
geom_tile(color = "black") +
scale_fill_manual(values = color_palette, name = "", labels = label_text)
## remove background and axis from plot
theme_change <- theme(
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
# Make ggplot
ggplot(melt(mat), aes(x = X1, y = X2, fill = factor(value))) +
geom_tile(color = "black") +
scale_fill_manual(values = color_palette, name = "", labels = label_text) +
theme_change
library(fossil) # for Chao1
library(vegan)     # for Simpson
library(metagenomeSeq) # data structured
library(breakaway) # for breakaway
install.packages("breakway")
require(BiocInstaller)
biocLite("breakaway")
library(maptpx) # for topic model fit
biocLite("maptpx")
biocLite("vegan")
biocLite("fossil")
?require
!require(CountClust, quietly = TRUE)
!require(CountClust)
!require(CountClust, quietly = TRUE)
if (!require(CountClust, quietly = TRUE)) {
library(devtools)
install_github("kkdey/CountClust")
library(Humanzee)
}
load("./data/msd.rdata")
ls()
rm(list=ls())
load("./data/msd.rdata")
ls()
str(msd)
pData(msd)
head(pData(msd))
table(pData(msd)$center,pData(msd)$Country)
table(pData(msd)$age)
head(pData(msd))
table(pData(msd)$AgeFactor)
table( pData(msd)$Type, pData(msd)$Type )
table( pData(msd)$Type, pData(msd)$AgeFactor )
country <- pData(msd)$Country
center <- pData(msd)$Center
age_factor <- pData(msd)$AgeFactor
type <- pData(msd)$Type
msd
str(exprs(msd))
coutn(msd)
count(msd)
MRcounts
str(MRcounts(msd))
dim(pData(msd))
libsize <- colSums(MRcount(msd))
libsize <- colSums(MRcounts(msd))
plot(libsize, type = "h")
plot(libsize[order(libsize)], type = "h")
plot(log2(libsize[order(libsize)]), type = "h",
ylab = "Sampling depth (count)",
xlab = "Sample")
plot(log2(libsize[order(libsize)]), type = "h",
ylab = "Sampling depth (log2 library size)",
xlab = "Sample")
?filterData
table(MRcounts(msd)[i,])
table(MRcounts(msd)[1,])
plot( table(MRcounts(msd)[1,]), type = "p")
gene_present <- table(MRcounts(msd)
)
plot(gene_present, type = "p",
ylab = "Number of genes",
xlab = "Gene count")
table(MRcounts(msd)[1,] >= 0)
table(MRcounts(msd)[1,] > 0)
gene_present <- table(MRcounts(msd) > 0)
plot(gene_present, type = "p",
ylab = "Number of genes",
xlab = "Gene count")
gene_present <- rowSums(MRcounts(msd) > 0)
plot(gene_present, type = "p",
ylab = "Number of genes",
xlab = "Gene count")
dim(MRcounts(msd))
plot(gene_present, type = "h",
ylab = "Number of present samples",
xlab = "Number of genes")
require(Humanzee)
permute_interact
permute_interact_per_gene
plot(gene_present, type = "h",
ylab = "Number of present samples",
xlab = "Number of genes")
?filterData
count_filtered <- filterData(mds, present = 10, depth = 100)
count_filtered <- filterData(msd, present = 10, depth = 100)
sum(!is.na(count_filtered))
sum(is.na(count_filtered))
str(count_filtered)
count_filtered <- filterData(MRcounts(msd), present = 10, depth = 100)
str(count_filtered)
sum( is.na(count_filtered) )
?RemoveSparseFeatures
RemoveSparseFeatures
require(CountClust)
?RemoveSparseFeatures
prop_present <- rowMeans(count_filtered)
summary(rowSums)
summary(prop_present)
!dir.exists(file.path("./internal_data", "diarrhea")
)
if(!dir.exists(file.path("./internal_data/diarrhea", "Structure"))) {
dir.create(file.path("./internal_data/diarrhea", "Structures"))}
if(!dir.exists(file.path("./internal_data/diarrhea", "Structure_batch_uncorrected"))) {
dir.create(file.path("./internal_data/diarrhea", "Structures_batch_uncorrected"))}
samp_metadata <- cbind.data.frame(center, country)
colnames(samp_metadata) = c("Center","Country")
samp_metadata <- cbind.data.frame(center, country)
colnames(samp_metadata) = c("Center","Country")
str(center)
head(pData(msd))
center <- pData(msd)$center
country <- pData(msd)$Country
center <- pData(msd)$center
age_factor <- pData(msd)$AgeFactor
type <- pData(msd)$Type
samp_metadata <- cbind.data.frame(center, country)
colnames(samp_metadata) = c("Center","Country")
for(per_structure in 1:length(n_clust)) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] ) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] ) )
}
obj <- StructureObj(counts_filtered, n_clust[per_structure],
samp_metadata = samp_metadata,
tol = 0.001, batch_lab = NULL,
path=paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure]),
partition=c('FALSE','TRUE','TRUE'));
}
n_clust <- 2
for(per_structure in 1:length(n_clust)) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] ) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] ) )
}
obj <- StructureObj(counts_filtered, n_clust[per_structure],
samp_metadata = samp_metadata,
tol = 0.001, batch_lab = NULL,
path=paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure]),
partition=c('FALSE','TRUE','TRUE'));
}
counts_filtered <- filterData(MRcounts(msd), present = 10, depth = 100)
sum( is.na(counts_filtered) )
count_filtered <- filterData(MRcounts(msd), present = 10, depth = 100)
sum( is.na(count_filtered) )
# Per gene proportion of present samples
prop_present <- rowMeans(count_filtered)
summary(prop_present)
n_clust <- 2
for(per_structure in 1:length(n_clust)) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] ) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] ) )
}
obj <- StructureObj(count_filtered, n_clust[per_structure],
samp_metadata = samp_metadata,
tol = 0.001, batch_lab = NULL,
path = paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure]),
partition=c('FALSE','TRUE','TRUE') )
}
library(fossil) # for Chao1
library(vegan)     # for Simpson
library(metagenomeSeq) # data structure
library(breakaway) # for breakaway
library(maptpx) # for topic model fit
if (!require(CountClust, quietly = TRUE)) {
library(devtools)
install_github("kkdey/CountClust")
library(CountClust)
}
n_clust <- 2
for(per_structure in 1:length(n_clust)) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] ) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] ) )
}
obj <- StructureObj(count_filtered, n_clust[per_structure],
samp_metadata = samp_metadata,
tol = 0.001, batch_lab = NULL,
path = paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure]),
partition=c('FALSE','TRUE','TRUE') )
}
per_structure = 1
paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] )
!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] ) )
paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clus_",
n_clust[per_structure] )
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clust_",
n_clust[per_structure] ) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clust_",
n_clust[per_structure] ) )
}
n_clust <- 2
for(per_structure in 1:length(n_clust)) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clust_",
n_clust[per_structure] ) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clust_",
n_clust[per_structure] ) )
}
obj <- StructureObj(count_filtered, n_clust[per_structure],
samp_metadata = samp_metadata,
tol = 0.001, batch_lab = NULL,
path = paste0("./internal_data/diarrhea/Structure_batch_uncorrected/clust_",
n_clust[per_structure]),
partition=c('FALSE','TRUE','TRUE') )
}
1:length(type)
type
unique(type)
head(pData(msd))
unique(age_factor)
unique(age_factor)[1]
paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", agegroup, "1", "/clust_",
n_clust[per_structure] ) )
paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", agegroup, "1", "/clust_",
n_clust[per_structure] )
per_type = 1
per_age = 1
paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", agegroup, "1", "/clust_",
n_clust[per_structure] )
paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] )
table(center)
table(center)
table(country)
count_subdata <- count_filtered[ , pData(msd)$type == unique(type)[per_type]
& pData(msd)$Age == unique(age_factor)[per_age] ]
for(per_structure in 1:length(n_clust)) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] ) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] ) )
}
obj <- StructureObj(count_filtered, n_clust[per_structure],
samp_metadata = samp_metadata,
tol = 0.001, batch_lab = NULL,
path = paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] ),
partition=c('FALSE','TRUE','TRUE') )
}
paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] )
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] ) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] ) )
}
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age) )
}
# Create output folder for each case type and each age group
for (per_type in 1:length(type)) {
for (per_age in 1:length(age_factor)) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age) )
}
}
}
nlevels(age_factor)
nlevels(type)
for (per_type in 1: length(unique(type)) ) {
for (per_age in 1: length(unique(age_factor)) ) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age) )
}
}
}
for (per_type in 1:length(type)) {
for (per_age in 1:length(age_factor)) {
count_subdata <- count_filtered[ , pData(msd)$type == unique(type)[per_type]
& pData(msd)$Age == unique(age_factor)[per_age] ]
for(per_structure in 1:length(n_clust)) {
fit <- StructureObj(count_filtered, n_clust[per_structure],
samp_metadata = samp_metadata,
tol = 0.001, batch_lab = NULL,
path = paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] ),
partition=c('FALSE','TRUE','TRUE') )
}
}
}
paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] )
dir.exists(paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] ))
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age,
"/clust_", n_clust[per_structure]) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age,
"/clust_", n_clust[per_structure]) )
}
for (per_type in 1:length(type)) {
for (per_age in 1:length(age_factor)) {
count_subdata <- count_filtered[ , pData(msd)$type == unique(type)[per_type]
& pData(msd)$Age == unique(age_factor)[per_age] ]
for(per_structure in 1:length(n_clust)) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age,
"/clust_", n_clust[per_structure]) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age,
"/clust_", n_clust[per_structure]) )
}
fit <- StructureObj(count_filtered, n_clust[per_structure],
samp_metadata = samp_metadata,
tol = 0.001, batch_lab = NULL,
path = paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] ),
partition=c('FALSE','TRUE','TRUE') )
}
}
}
for (per_type in 1:length(unique(type)) ) {
for (per_age in 1:length(unique(age_factor)) ) {
count_subdata <- count_filtered[ , pData(msd)$type == unique(type)[per_type]
& pData(msd)$Age == unique(age_factor)[per_age] ]
for(per_structure in 1:length(n_clust)) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age,
"/clust_", n_clust[per_structure]) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age,
"/clust_", n_clust[per_structure]) )
}
fit <- StructureObj(count_filtered, n_clust[per_structure],
samp_metadata = samp_metadata,
tol = 0.001, batch_lab = NULL,
path = paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] ),
partition=c('FALSE','TRUE','TRUE') )
}
}
}
n_clust
n_clust <- c(2:10)
n_clust[1]
n_clust[1]
n_clust <- c(2:10)
for (per_type in 1:length(unique(type)) ) {
for (per_age in 1:length(unique(age_factor)) ) {
count_subdata <- count_filtered[ , pData(msd)$type == unique(type)[per_type]
& pData(msd)$Age == unique(age_factor)[per_age] ]
for(per_structure in 1:length(n_clust)) {
if(!dir.exists( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age,
"/clust_", n_clust[per_structure]) ) ) {
dir.create( paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age,
"/clust_", n_clust[per_structure]) )
}
fit <- StructureObj(count_filtered, n_clust[per_structure],
samp_metadata = samp_metadata,
tol = 0.001, batch_lab = NULL,
path = paste0("./internal_data/diarrhea/Structure_batch_uncorrected/",
unique(type)[per_type], "-", "agegroup", per_age, "/clust_",
n_clust[per_structure] ),
partition=c('FALSE','TRUE','TRUE') )
}
}
}
getwd()
pData(msd)
pData(msd)
msd = msd[,which(pData(msd)$Country==“Bangladesh” & pData(msd)$AgeFactor == 5)]
msd = msd[,which(pData(msd)$Country== "Bangladesh" & pData(msd)$AgeFactor == 5)]
pData(msd)
head(pData(msd))
load("./data/msd.rdata")
head(pData(msd))
msd[,which(pData(msd)$Country== "Bangladesh" & pData(msd)$AgeFactor == 5)]
output_dir <- "./internal_data/diarrhea/Structure_batch_uncorrected/Control-agegroup5"
fit <- read.table( file = paste0(output_dir, "/clust_4", "omega_mat.txt"))
paste0(output_dir, "/clust_4", "omega_mat.txt")
output_dir <- "./internal_data/diarrhea/Structure_batch_uncorrected/Control-agegroup5"
fit <- read.table( file = paste0(output_dir, "/clust_4/", "omega_mat.txt"))
head(fit)
table(pData(msd)$center,pData(msd)$Country)
