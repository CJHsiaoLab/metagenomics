phi_vec <- c(phi_vec,phi_genes[labs]);
factor_level <- c(factor_level, rep(toString(cell_phase[l]), length(phi_genes[labs])));
}
phi_vec
phi_vec1 <- unique(phi_vec);
factor_vec <- factor_level[match(phi_vec1,phi_vec)]
factor_vec
par(mar=c(4,1,1,1))
plot(ordered(factor_vec, c("G1.S", "S", "G2.M", "M", "M.G1")), phi_vec1,
xlab="factor_levels", ylab="phase (radians)",
main="Phase plot across cell phases", col="red")
plot(ordered(c("G1.S", "S", "G2.M", "M", "M.G1"),c("G1.S", "S", "G2.M", "M", "M.G1")), phi_vec1,
xlab="factor_levels", ylab="phase (radians)",
main="Phase plot across cell phases", col="red")
phi_vec1 <- c(phi_vec1, phi_vec1[4])
plot(ordered(c("G1.S", "S", "G2.M", "M", "M.G1"),c("G1.S", "S", "G2.M", "M", "M.G1")), phi_vec1,
xlab="factor_levels", ylab="phase (radians)",
main="Phase plot across cell phases", col="red")
amp_vec <- array(0, 0);
factor_level <- array(0,0);
for(l in 1:5){
labs <- match(cell_cycle_genes_list[[l]], colnames(cycle_data));
labs <- labs[!is.na(labs)]
print(length(labs))
amp_vec <- c(amp_vec,amp_genes[labs]);
factor_level <- c(factor_level, rep(toString(cell_phase[l]), length(amp_genes[labs])));
}
amp_vec1 <- unique(amp_vec);
factor_vec <- factor_level[match(amp_vec1,amp_vec)]
par(mar=c(4,1,1,1))
plot(ordered(factor_vec, c("G1.S", "S", "G2.M", "M", "M.G1")), amp_vec1/1000,
xlab="factor_levels", ylab="amplitudes",
main="Amplitude plot across cell phases", col="red")
amp_genes
snr_vec <- array(0,0)
factor_level <- array(0,0)
for(l in 1:5){
labs <- match(cell_cycle_genes_list[[l]], colnames(cycle_data));
labs <- labs[!is.na(labs)]
print(length(labs))
snr_vec <- c(snr_vec,SNR[labs]);
factor_level <- c(factor_level, rep(toString(cell_phase[l]), length(SNR[labs])));
}
snr_vec1 <- unique(snr_vec);
factor_vec <- factor_level[match(snr_vec1,snr_vec)]
par(mar=c(4,1,1,1))
plot(ordered(factor_vec, c("G1.S", "S", "G2.M", "M", "M.G1")), snr_vec1,
xlab="factor_levels", ylab="SNR",
main="SNR plot across cell phases", col="red")
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
snr_vec <- array(0,0)
factor_level <- array(0,0)
for(l in 1:5){
labs <- match(cell_cycle_genes_list[[l]], colnames(cycle_data));
labs <- labs[!is.na(labs)]
print(length(labs))
snr_vec <- c(snr_vec,SNR[labs]);
factor_level <- c(factor_level, rep(toString(cell_phase[l]), length(SNR[labs])));
}
snr_vec1 <- unique(snr_vec);
factor_vec <- factor_level[match(snr_vec1,snr_vec)]
par(mar=c(4,1,1,1))
plot(ordered(factor_vec, c("G1.S", "S", "G2.M", "M", "M.G1")), snr_vec1,
xlab="factor_levels", ylab="SNR",
main="SNR plot across cell phases", col="red")
cell_times <- load_data$cell_times
vioplot(cell_times[which(cell_phase_vector=="G1.S")],
cell_times[which(cell_phase_vector=="S")],
cell_times[which(cell_phase_vector=="G2.M")],
cell_times[which(cell_phase_vector=="M")],
cell_times[which(cell_phase_vector=="M.G1")],
names=c("G1.S","S","G2.M","M","M.G1"),
col="red")
rm(list=ls())
source('~/Documents/singleCell-method/project/R/cell_order/example_sim.R')
source('~/Documents/singleCell-method/project/R/cell_order/utilities.R')
molecules_single_cell_cycle <- read.table("../data/molecules_ipsc_single_cell_cycle.txt");
cycle_counts_data <- t(molecules_single_cell_cycle);
cycle_counts_data <- cycle_counts_data[, which(colSums(cycle_counts_data)!=0)];
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data <- apply(cycle_voom_data,2, function(x) x-mean(x));
cell_phase_vector <- as.vector(as.matrix(read.table("../data/cell_phase_vector_yoav.txt")));
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
order1 <- match(cell_cycle_genes_list[[1]], colnames(cycle_data)); order1 <- order1[which(!is.na(order1))];
order2 <- match(cell_cycle_genes_list[[2]], colnames(cycle_data)); order2 <- order2[which(!is.na(order2))]
order3 <- match(cell_cycle_genes_list[[3]], colnames(cycle_data)); order3 <- order3[which(!is.na(order3))]
order4 <- match(cell_cycle_genes_list[[4]], colnames(cycle_data)); order4 <- order4[which(!is.na(order4))]
order5 <- match(cell_cycle_genes_list[[5]], colnames(cycle_data)); order5 <- order5[which(!is.na(order5))]
order <- c(order1, order2, order3, order4, order5);
phase_genes <- c(rep("G1.S",length(order1)), rep("S", length(order2)), rep("G2.M", length(order3)), rep("M", length(order4)),
rep("M.G1", length(order5)));
order_unique <- unique(order);
phase_genes <- phase_genes[match(order_unique, order)];
phi_genes_yoav <- c(rep((11/(2*24))*2*pi, length(order1)), rep((11/24 + (19-11)/(2*24))*2*pi, length(order2)),
rep((19/24 + ((23-19)/(2*24)))*2*pi, length(order3)), rep((23/24)*2*pi, length(order4)),
rep((23/24)*2*pi, length(order5)));
phi_genes_yoav <- phi_genes_yoav[match(order_unique, order)];
out <- cell_reordering_phase(cycle_data, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_phase_fixed.rda",
fix.phase = TRUE, phase_in = phi_genes_yoav)
rm(list=ls())
source('~/Documents/singleCell-method/project/R/cell_order/utilities.R')
out <- cell_reordering_phase(cycle_data, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_phase_fixed.rda",
fix.phase = TRUE, phase_in = phi_genes_yoav)
molecules_single_cell_cycle <- read.table("../data/molecules_ipsc_single_cell_cycle.txt");
cycle_counts_data <- t(molecules_single_cell_cycle);
cycle_counts_data <- cycle_counts_data[, which(colSums(cycle_counts_data)!=0)];
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data <- apply(cycle_voom_data,2, function(x) x-mean(x));
cell_phase_vector <- as.vector(as.matrix(read.table("../data/cell_phase_vector_yoav.txt")));
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
order1 <- match(cell_cycle_genes_list[[1]], colnames(cycle_data)); order1 <- order1[which(!is.na(order1))];
order2 <- match(cell_cycle_genes_list[[2]], colnames(cycle_data)); order2 <- order2[which(!is.na(order2))]
order3 <- match(cell_cycle_genes_list[[3]], colnames(cycle_data)); order3 <- order3[which(!is.na(order3))]
order4 <- match(cell_cycle_genes_list[[4]], colnames(cycle_data)); order4 <- order4[which(!is.na(order4))]
order5 <- match(cell_cycle_genes_list[[5]], colnames(cycle_data)); order5 <- order5[which(!is.na(order5))]
order <- c(order1, order2, order3, order4, order5);
phase_genes <- c(rep("G1.S",length(order1)), rep("S", length(order2)), rep("G2.M", length(order3)), rep("M", length(order4)),
rep("M.G1", length(order5)));
order_unique <- unique(order);
phase_genes <- phase_genes[match(order_unique, order)];
phi_genes_yoav <- c(rep((11/(2*24))*2*pi, length(order1)), rep((11/24 + (19-11)/(2*24))*2*pi, length(order2)),
rep((19/24 + ((23-19)/(2*24)))*2*pi, length(order3)), rep((23/24)*2*pi, length(order4)),
rep((23/24)*2*pi, length(order5)));
phi_genes_yoav <- phi_genes_yoav[match(order_unique, order)];
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
order1 <- match(cell_cycle_genes_list[[1]], colnames(cycle_data)); order1 <- order1[which(!is.na(order1))];
order2 <- match(cell_cycle_genes_list[[2]], colnames(cycle_data)); order2 <- order2[which(!is.na(order2))]
order3 <- match(cell_cycle_genes_list[[3]], colnames(cycle_data)); order3 <- order3[which(!is.na(order3))]
order4 <- match(cell_cycle_genes_list[[4]], colnames(cycle_data)); order4 <- order4[which(!is.na(order4))]
order5 <- match(cell_cycle_genes_list[[5]], colnames(cycle_data)); order5 <- order5[which(!is.na(order5))]
order <- c(order1, order2, order3, order4, order5);
phase_genes <- c(rep("G1.S",length(order1)), rep("S", length(order2)), rep("G2.M", length(order3)), rep("M", length(order4)),
rep("M.G1", length(order5)));
order_unique <- unique(order);
phase_genes <- phase_genes[match(order_unique, order)];
phi_genes_yoav <- c(rep((11/(2*24))*2*pi, length(order1)), rep((11/24 + (19-11)/(2*24))*2*pi, length(order2)),
rep((19/24 + ((23-19)/(2*24)))*2*pi, length(order3)), rep((23/24)*2*pi, length(order4)),
rep((23/24)*2*pi, length(order5)));
phi_genes_yoav <- phi_genes_yoav[match(order_unique, order)];
out <- cell_reordering_phase(cycle_data, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_phase_fixed.rda",
fix.phase = TRUE, phase_in = phi_genes_yoav)
phi_genes_yoav
dim(cycle_data)
out <- cell_reordering_phase(cycle_data, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_phase_fixed.rda",
fix.phase = TRUE, phase_in = phi_genes_yoav)
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
celltime_levels =100
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
for(iter in 1:num_iter)
{
fun <- cell_reordering_iter(cycle_data, cell_times_iter, fix.phase, phase_in);
cell_times_iter <- fun$cell_times_iter;
amp_iter <- fun$amp_iter;
phi_iter <- fun$phi_iter;
sigma_iter <- fun$sigma_iter;
loglik_iter <- loglik_cell_cycle(cycle_data, cell_times_iter, amp_iter, phi_iter, sigma_iter);
cat("The loglikelihood after iter", iter, "is:", loglik_iter,"\n")
}
num_iter <- 100
for(iter in 1:num_iter)
{
fun <- cell_reordering_iter(cycle_data, cell_times_iter, fix.phase, phase_in);
cell_times_iter <- fun$cell_times_iter;
amp_iter <- fun$amp_iter;
phi_iter <- fun$phi_iter;
sigma_iter <- fun$sigma_iter;
loglik_iter <- loglik_cell_cycle(cycle_data, cell_times_iter, amp_iter, phi_iter, sigma_iter);
cat("The loglikelihood after iter", iter, "is:", loglik_iter,"\n")
}
phase_in = phi_genes_yoav
for(iter in 1:num_iter)
{
fun <- cell_reordering_iter(cycle_data, cell_times_iter, fix.phase, phase_in);
cell_times_iter <- fun$cell_times_iter;
amp_iter <- fun$amp_iter;
phi_iter <- fun$phi_iter;
sigma_iter <- fun$sigma_iter;
loglik_iter <- loglik_cell_cycle(cycle_data, cell_times_iter, amp_iter, phi_iter, sigma_iter);
cat("The loglikelihood after iter", iter, "is:", loglik_iter,"\n")
}
fix.phase
fix.phase = TRUE
out <- cell_reordering_phase(cycle_data, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_phase_fixed.rda",
fix.phase = TRUE, phase_in = phi_genes_yoav)
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
for(iter in 1:num_iter)
{
fun <- cell_reordering_iter(cycle_data, cell_times_iter, fix.phase, phase_in);
cell_times_iter <- fun$cell_times_iter;
amp_iter <- fun$amp_iter;
phi_iter <- fun$phi_iter;
sigma_iter <- fun$sigma_iter;
loglik_iter <- loglik_cell_cycle(cycle_data, cell_times_iter, amp_iter, phi_iter, sigma_iter);
cat("The loglikelihood after iter", iter, "is:", loglik_iter,"\n")
}
source('~/Documents/singleCell-method/project/R/cell_order/utilities.R')
molecules_single_cell_cycle <- read.table("../data/molecules_ipsc_single_cell_cycle.txt");
cycle_counts_data <- t(molecules_single_cell_cycle);
cycle_counts_data <- cycle_counts_data[, which(colSums(cycle_counts_data)!=0)];
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data <- apply(cycle_voom_data,2, function(x) x-mean(x));
cell_phase_vector <- as.vector(as.matrix(read.table("../data/cell_phase_vector_yoav.txt")));
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
order1 <- match(cell_cycle_genes_list[[1]], colnames(cycle_data)); order1 <- order1[which(!is.na(order1))];
order2 <- match(cell_cycle_genes_list[[2]], colnames(cycle_data)); order2 <- order2[which(!is.na(order2))]
order3 <- match(cell_cycle_genes_list[[3]], colnames(cycle_data)); order3 <- order3[which(!is.na(order3))]
order4 <- match(cell_cycle_genes_list[[4]], colnames(cycle_data)); order4 <- order4[which(!is.na(order4))]
order5 <- match(cell_cycle_genes_list[[5]], colnames(cycle_data)); order5 <- order5[which(!is.na(order5))]
order <- c(order1, order2, order3, order4, order5);
phase_genes <- c(rep("G1.S",length(order1)), rep("S", length(order2)), rep("G2.M", length(order3)), rep("M", length(order4)),
rep("M.G1", length(order5)));
order_unique <- unique(order);
phase_genes <- phase_genes[match(order_unique, order)];
phi_genes_yoav <- c(rep((11/(2*24))*2*pi, length(order1)), rep((11/24 + (19-11)/(2*24))*2*pi, length(order2)),
rep((19/24 + ((23-19)/(2*24)))*2*pi, length(order3)), rep((23/24)*2*pi, length(order4)),
rep((23/24)*2*pi, length(order5)));
phi_genes_yoav <- phi_genes_yoav[match(order_unique, order)];
out <- cell_reordering_phase(cycle_data, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_phase_fixed.rda",
fix.phase = TRUE, phase_in = phi_genes_yoav)
rm(list=ls())
source('~/Documents/singleCell-method/project/R/cell_order/utilities.R')
molecules_single_cell_cycle <- read.table("../data/molecules_ipsc_single_cell_cycle.txt");
cycle_counts_data <- t(molecules_single_cell_cycle);
cycle_counts_data <- cycle_counts_data[, which(colSums(cycle_counts_data)!=0)];
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data <- apply(cycle_voom_data,2, function(x) x-mean(x));
cell_phase_vector <- as.vector(as.matrix(read.table("../data/cell_phase_vector_yoav.txt")));
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
order1 <- match(cell_cycle_genes_list[[1]], colnames(cycle_data)); order1 <- order1[which(!is.na(order1))];
order2 <- match(cell_cycle_genes_list[[2]], colnames(cycle_data)); order2 <- order2[which(!is.na(order2))]
order3 <- match(cell_cycle_genes_list[[3]], colnames(cycle_data)); order3 <- order3[which(!is.na(order3))]
order4 <- match(cell_cycle_genes_list[[4]], colnames(cycle_data)); order4 <- order4[which(!is.na(order4))]
order5 <- match(cell_cycle_genes_list[[5]], colnames(cycle_data)); order5 <- order5[which(!is.na(order5))]
order <- c(order1, order2, order3, order4, order5);
phase_genes <- c(rep("G1.S",length(order1)), rep("S", length(order2)), rep("G2.M", length(order3)), rep("M", length(order4)),
rep("M.G1", length(order5)));
order_unique <- unique(order);
phase_genes <- phase_genes[match(order_unique, order)];
phi_genes_yoav <- c(rep((11/(2*24))*2*pi, length(order1)), rep((11/24 + (19-11)/(2*24))*2*pi, length(order2)),
rep((19/24 + ((23-19)/(2*24)))*2*pi, length(order3)), rep((23/24)*2*pi, length(order4)),
rep((23/24)*2*pi, length(order5)));
phi_genes_yoav <- phi_genes_yoav[match(order_unique, order)];
out <- cell_reordering_phase(cycle_data, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_phase_fixed.rda",
fix.phase = TRUE, phase_in = phi_genes_yoav)
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(numcells, celltimes_choice, replace=FALSE);
celltime_levels <- 100
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(numcells, celltimes_choice, replace=FALSE);
cell_times_iter <- cell_times_init;
fun <- cell_reordering_iter(cycle_data, cell_times_iter, fix.phase, phase_in);
phi_genes_yoav <- phi_genes_yoav[match(order_unique, order)];
phi_genes_yoav
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
order1 <- match(cell_cycle_genes_list[[1]], colnames(cycle_data)); order1 <- order1[which(!is.na(order1))];
order2 <- match(cell_cycle_genes_list[[2]], colnames(cycle_data)); order2 <- order2[which(!is.na(order2))]
order3 <- match(cell_cycle_genes_list[[3]], colnames(cycle_data)); order3 <- order3[which(!is.na(order3))]
order4 <- match(cell_cycle_genes_list[[4]], colnames(cycle_data)); order4 <- order4[which(!is.na(order4))]
order5 <- match(cell_cycle_genes_list[[5]], colnames(cycle_data)); order5 <- order5[which(!is.na(order5))]
order <- c(order1, order2, order3, order4, order5);
phase_genes <- c(rep("G1.S",length(order1)), rep("S", length(order2)), rep("G2.M", length(order3)), rep("M", length(order4)),
rep("M.G1", length(order5)));
order_unique <- unique(order);
phase_genes <- phase_genes[match(order_unique, order)];
phi_genes_yoav <- c(rep((11/(2*24))*2*pi, length(order1)), rep((11/24 + (19-11)/(2*24))*2*pi, length(order2)),
rep((19/24 + ((23-19)/(2*24)))*2*pi, length(order3)), rep((23/24)*2*pi, length(order4)),
rep((23/24)*2*pi, length(order5)));
phi_genes_yoav <- phi_genes_yoav[match(order_unique, order)];
phi_genes_yoav
fun <- cell_reordering_iter(cycle_data, cell_times_iter, fix.phase, phase_in);
phase_in <- phi_genes_yoav
fix.phase <- TRUE
fun <- cell_reordering_iter(cycle_data, cell_times_iter, fix.phase, phase_in);
cell_times_iter
cell_times_init
cell_times_init <- sample(numcells, celltimes_choice, replace=FALSE);
cell_times_init
numcells
celltimes_choice
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(numcells, celltimes_choice, replace=TRUE);
cell_times_iter <- cell_times_init;
cell_times_iter
G <- dim(cycle_data)[2];
numcells <- dim(cycle_data)[1];
celltimes_choice <- seq(0, 2*pi, 2*pi/(celltime_levels-1));
cell_times_init <- sample(celltimes_choice, numcells, replace=TRUE);
cell_times_iter <- cell_times_init;
cell_times_iter
fun <- cell_reordering_iter(cycle_data, cell_times_iter, fix.phase, phase_in);
cell_times_iter
fun <- cell_reordering_iter(cycle_data, celltime_levels, cell_times_iter, fix.phase, phase_in);
fun
out <- cell_reordering_phase(cycle_data, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_phase_fixed.rda",
fix.phase = TRUE, phase_in = phi_genes_yoav)
source('~/Documents/singleCell-method/project/R/cell_order/utilities.R')
rm(list=ls())
molecules_single_cell_cycle <- read.table("../data/molecules_ipsc_single_cell_cycle.txt");
cycle_counts_data <- t(molecules_single_cell_cycle);
cycle_counts_data <- cycle_counts_data[, which(colSums(cycle_counts_data)!=0)];
cycle_voom_data <- voom(cycle_counts_data)$E;
cycle_data <- apply(cycle_voom_data,2, function(x) x-mean(x));
cell_phase_vector <- as.vector(as.matrix(read.table("../data/cell_phase_vector_yoav.txt")));
cell_cycle_genes <- read.table("../data/cellcyclegenes.txt", header = TRUE, sep="\t")
## create 5 lists of 5 phases (de-level and then remove "")
cell_cycle_genes_list <- lapply(1:5,function(x){
temp <- as.character(cell_cycle_genes[,x])
temp[temp!=""]
})
order1 <- match(cell_cycle_genes_list[[1]], colnames(cycle_data)); order1 <- order1[which(!is.na(order1))];
order2 <- match(cell_cycle_genes_list[[2]], colnames(cycle_data)); order2 <- order2[which(!is.na(order2))]
order3 <- match(cell_cycle_genes_list[[3]], colnames(cycle_data)); order3 <- order3[which(!is.na(order3))]
order4 <- match(cell_cycle_genes_list[[4]], colnames(cycle_data)); order4 <- order4[which(!is.na(order4))]
order5 <- match(cell_cycle_genes_list[[5]], colnames(cycle_data)); order5 <- order5[which(!is.na(order5))]
order <- c(order1, order2, order3, order4, order5);
phase_genes <- c(rep("G1.S",length(order1)), rep("S", length(order2)), rep("G2.M", length(order3)), rep("M", length(order4)),
rep("M.G1", length(order5)));
order_unique <- unique(order);
phase_genes <- phase_genes[match(order_unique, order)];
phi_genes_yoav <- c(rep((11/(2*24))*2*pi, length(order1)), rep((11/24 + (19-11)/(2*24))*2*pi, length(order2)),
rep((19/24 + ((23-19)/(2*24)))*2*pi, length(order3)), rep((23/24)*2*pi, length(order4)),
rep((23/24)*2*pi, length(order5)));
phi_genes_yoav <- phi_genes_yoav[match(order_unique, order)];
source('~/Documents/singleCell-method/project/R/cell_order/utilities.R')
out <- cell_reordering_phase(cycle_data, celltime_levels = 100, num_iter=100,
save_path="../rdas/cell_order_ipsc_phase_fixed.rda",
fix.phase = TRUE, phase_in = phi_genes_yoav)
load_data <- get(load(file="../rdas/cell_order_ipsc_phase_fixed.rda"));
amp_genes <- load_data$amp;
sd_genes <- load_data$sigma;
phi_genes <- load_data$phi;
cell_times <- load_data$cell_times
phi_vec <- array(0, 0);
factor_level <- array(0,0);
cell_phase <- colnames(cell_cycle_genes)
cell_phase <- factor(cell_phase,
levels = c("G1.S", "S", "G2.M", "M", "M.G1"))
for(l in 1:5){
labs <- match(cell_cycle_genes_list[[l]], colnames(cycle_data));
labs <- labs[which(!is.na(labs))]
phi_vec <- c(phi_vec,phi_genes[labs]);
factor_level <- c(factor_level, rep(toString(cell_phase[l]), length(phi_genes[labs])));
}
phi_vec1 <- unique(phi_vec);
phi_vec1 <- c(phi_vec1, phi_vec1[4])
#factor_vec <- factor_level[match(phi_vec1,phi_vec)]
#par(mar=c(4,1,1,1))
#plot(ordered(factor_vec, c("G1.S", "S", "G2.M", "M", "M.G1")), phi_vec1,
#     xlab="factor_levels", ylab="phase (radians)",
#     main="Phase plot across cell phases", col="red")
plot(ordered(c("G1.S", "S", "G2.M", "M", "M.G1"),c("G1.S", "S", "G2.M", "M", "M.G1")), phi_vec1,
xlab="factor_levels", ylab="phase (radians)",
main="Phase plot across cell phases", col="red")
amp_vec <- array(0, 0);
factor_level <- array(0,0);
for(l in 1:5){
labs <- match(cell_cycle_genes_list[[l]], colnames(cycle_data));
labs <- labs[!is.na(labs)]
print(length(labs))
amp_vec <- c(amp_vec,amp_genes[labs]);
factor_level <- c(factor_level, rep(toString(cell_phase[l]), length(amp_genes[labs])));
}
amp_vec1 <- unique(amp_vec);
factor_vec <- factor_level[match(amp_vec1,amp_vec)]
par(mar=c(4,1,1,1))
plot(ordered(factor_vec, c("G1.S", "S", "G2.M", "M", "M.G1")), amp_vec1/1000,
xlab="factor_levels", ylab="amplitudes",
main="Amplitude plot across cell phases", col="red")
## SNR of genes across the cell phases
ESS <- amp_genes^2; RSS <- sd_genes^2
SNR <- ESS/RSS;
snr_vec <- array(0,0)
factor_level <- array(0,0)
for(l in 1:5){
labs <- match(cell_cycle_genes_list[[l]], colnames(cycle_data));
labs <- labs[!is.na(labs)]
print(length(labs))
snr_vec <- c(snr_vec,SNR[labs]);
factor_level <- c(factor_level, rep(toString(cell_phase[l]), length(SNR[labs])));
}
snr_vec1 <- unique(snr_vec);
factor_vec <- factor_level[match(snr_vec1,snr_vec)]
par(mar=c(4,1,1,1))
plot(ordered(factor_vec, c("G1.S", "S", "G2.M", "M", "M.G1")), snr_vec1,
xlab="factor_levels", ylab="SNR",
main="SNR plot across cell phases", col="red")
vioplot(cell_times[which(cell_phase_vector=="G1.S")],
cell_times[which(cell_phase_vector=="S")],
cell_times[which(cell_phase_vector=="G2.M")],
cell_times[which(cell_phase_vector=="M")],
cell_times[which(cell_phase_vector=="M.G1")],
names=c("G1.S","S","G2.M","M","M.G1"),
col="red")
n=1:1000;
plot(exp(n*0.5), (1+n*0.5)^n)
plot(log(exp(n*0.5)), log((1+n*0.5)^n))
plot(log(exp(n*0.2)), log((1+n*0.2)^n))
plot(log(exp(n*0.01)), log((1+n*0.01)^n))
abline((1,1))
abline(c(1,1))
abline(c(0,1))
plot(log(exp(n*0.01)), log((1+n*0.01)^n))
abline(c(1,0))
plot(log(exp(n*0.01)), log((1+n*0.01)^n))
abline(c(0,1))
plot(log(exp(n*0.0001)), log((1+n*0.0001)^n))
plot(log(exp(n*0.0000001)), log((1+n*0.000001)^n))
abline(c(0,1))
plot(log(exp(n^(0.01)*0.0000001)), log((1+n^(0.01)*0.000001)^n))
abline(0,1)
plot(log(exp(n^(0.5)*0.0000001)), log((1+n^(0.5)*0.000001)^n))
abline(0,1)
rm(list=ls())
setwd('/Users/kushal/Documents/metagenomics/project/')
library(maptpx)
library(CountClust)
library(metagenomeSeq)
library(msd16s)
data(msd16s)
metadata <- pData(msd16s);
counts <- t(MRcounts(msd16s))
samp_metadata <- cbind.data.frame(metadata$Type, metadata$Country, metadata$Age, metadata$AgeFactor, metadata$Dysentery);
colnames(samp_metadata) <- c("type","country","age","age.factor","dysentery");
if(!dir.exists("../plots/diarrhea-metagenome")) dir.create("../plots/diarrhea-metagenome")
nclus_vec <- 2:7;
if (file.exists("./rdas/diarrhea-metagenome.rda")) {
diarrhea_metagenome_topics <- get(load("./rdas/diarrhea-metagenome.rda"));
} else {
StructureObj(counts ,nclus_vec,samp_metadata = samp_metadata, tol=0.0005, batch_lab = NULL, path_rda="./rdas/diarrhea-metagenome.rda",path_struct = "../plots/diarrhea-metagenome");
diarrhea_metagenome_topics <- get(load("./rdas/diarrhea-metagenome.rda"));
}
for(num in 1:length(nclus_vec))
{
obj <- StructureObj_omega(diarrhea_metagenome_topics[[num]]$omega, samp_metadata = samp_metadata, batch_lab = NULL,partition = rep("TRUE",5),path_struct='../plots/diarrhea-metagenome',control=list(cex.axis=1.5, lwd=2));
}
clus_topics <- diarrhea_metagenome_topics[[5]]$omega
clus_topics
dim(clus_topics)
clus_topics <- diarrhea_metagenome_topics[[4]]$omega
dim(clus_topics)
barplot(1:5, col=2:6)
pink_cluster <- clus_topics[,5];
pink_cluster
which(pink_cluster > 0.4)
which(pink_cluster > 0.7)
samp_metadata[which(pink_cluster > 0.7),1:4]
samp_metadata[which(pink_cluster > 0.5),1:4]
samp_metadata[which(pink_cluster > 0.8),1:4]
samp_metadata[which(pink_cluster > 0.7),1:4]
samp_metadata[which(pink_cluster > 0.7),1:4]$Country
samp_metadata[which(pink_cluster > 0.7),1:4]$country
table(samp_metadata[which(pink_cluster > 0.7),1:4]$country)
xtabs(~samp_metadata$age + samp_metadata$country)
xtabs(~samp_metadata$age + samp_metadata$type)
clus_topics <- diarrhea_metagenome_topics[[4]]$omega
pink_cluster <- clus_topics[,5];
table(samp_metadata[which(pink_cluster > 0.5),1:4]$country)
