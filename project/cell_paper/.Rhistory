install_github('kkdey/tmcmcR')
setwd('/Users/kushal/Documents/metagenomics/project/cell_paper/')
suppressMessages(suppressWarnings(library(maptpx)))
suppressMessages(suppressWarnings(library(CountClust)))
suppressMessages(suppressWarnings(library(metagenomeSeq)))
suppressMessages(suppressWarnings(library(ashr)))
suppressMessages(suppressWarnings(library(qvalue)))
load("cellPaperRaw.rdata")
pheno_data <- pData(cellPaper); # phenotype data (there are 62 columns in this)
age = pData(cellPaper)$Age_at_Collection
status = pData(cellPaper)$Case_Control
gender =pData(cellPaper)$Gender;
ord <- order(age,decreasing=TRUE);
age <- age[ord];
status <- status[ord]
gender <- gender[ord];
counts = MRcounts(cellPaper);
counts <- counts[,ord];
counts <- t(counts);
counts_preprocess <- handleNA(counts)$data;
## Removing the sparse OTUs
counts_filtered <- RemoveSparseFeatures(counts_preprocess,0.99)$data;
betaval_otu <- array(0,dim(counts_filtered)[2]);
sd_betaval_otu <- array(0,dim(counts_filtered)[2]);
pval_otu <- array(0,dim(counts_filtered)[2]);
g=1;
out <- glm(counts_filtered[,g] ~ age + as.factor(status)*age + as.factor(status), family='poisson');
out
out <- glm(counts_filtered[,g] ~ age + as.factor(status), family='poisson');
out
out <- glm(counts_filtered[,g] ~ age + as.factor(status)*age + as.factor(status), family='poisson');
summary(out)
summary(out)$coefficients[3,1]
betaval_otu <- array(0,dim(counts_filtered)[2]);
sd_betaval_otu <- array(0,dim(counts_filtered)[2]);
pval_otu <- array(0,dim(counts_filtered)[2]);
for(g in 1:dim(counts_filtered)[2])
{
out <- glm(counts_filtered[,g] ~ age + as.factor(status), family='poisson');
betaval_otu[g] <- summary(out)$coefficients[3,1];
sd_betaval_otu[g] <- summary(out)$coefficients[3,2]
pval_otu[g] <- summary(out)$coefficients[3,4]
}
pval_otu
imp_features <- which(pval_otu < 0.05/dim(counts_filtered)[2]);
imp_features
counts_features <- counts_filtered[,imp_features];
dim(counts_features)
nclus_vec <- 2:4;
if(!dir.exists("Structure")) dir.create("Structure")
if(!dir.exists("Structure/imp_features")) dir.create("Structure/imp_features")
bayesfac <- array(0,length(nclus_vec));
samp_metadata <- cbind.data.frame(age,status,gender);
colnames(samp_metadata) = c("Age","Status","Gender");
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/imp_features/clus_",nclus_vec[num]))) dir.create(paste0("Structure/imp_features/clus_",nclus_vec[num]))
obj <- StructureObj(counts_features,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0("Structure/imp_features/clus_",nclus_vec[num]),
partition=c('FALSE','TRUE','TRUE'),
control = list(lwd=3,struct.width=600, struct.height=400));
}
omega <- as.matrix(read.table('Structure/imp_features/clus_2/omega_mat.txt'));
par(mfrow=c(1,1))
plot(omega[,1]~age,pch=21,lwd=2, bty="l",ylab="admix proportion of red cluster",xlab="Age at collection")
index_red <- which(omega[,1] > 0.9);
index_green <- which(omega[,1] < 0.1)
red_cluster_samples <- counts_feature_status[index_red,];
green_cluster_samples <- counts_feature_status[index_green,];
nclus_vec <- 2;
bayesfac <- array(0,length(nclus_vec));
status_red <- status[index_red];
samp_metadata <- cbind.data.frame(status_red);
colnames(samp_metadata) = c("Status");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(red_cluster_samples,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/red_cluster/imp_features'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
omega <- as.matrix(read.table('Structure/imp_features/clus_2/omega_mat.txt'));
par(mfrow=c(1,1))
plot(omega[,1]~age,pch=21,lwd=2, bty="l",ylab="admix proportion of red cluster",xlab="Age at collection")
index_red <- which(omega[,1] > 0.9);
index_green <- which(omega[,1] < 0.1)
red_cluster_samples <- counts_feature_status[index_red,];
green_cluster_samples <- counts_feature_status[index_green,];
red_cluster_samples <- counts_features[index_red,];
green_cluster_samples <- counts_features[index_green,];
nclus_vec <- 2;
bayesfac <- array(0,length(nclus_vec));
status_red <- status[index_red];
samp_metadata <- cbind.data.frame(status_red);
colnames(samp_metadata) = c("Status");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(red_cluster_samples,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/red_cluster/imp_features'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
nclus_vec <- 2;
bayesfac <- array(0,length(nclus_vec));
status_green <- status[index_green];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(green_cluster_samples,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster/imp_features'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
g=1
out <- glm(red_cluster_samples[,g] ~ as.factor(status), family='poisson');
out <- glm(red_cluster_samples[,g] ~ as.factor(status_red), family='poisson');
out
summary(out)
pval_otu_red <- array(0,dim(red_cluster_samples)[2]);
for(g in 1:dim(counts_filtered)[2])
{
out <- glm(red_cluster_samples[,g] ~ as.factor(status_red), family='poisson');
pval_otu_red[g] <- summary(out)$coefficients[2,4]
}
pval_otu_red <- array(0,dim(red_cluster_samples)[2]);
for(g in 1:dim(red_cluster_samples)[2])
{
out <- glm(red_cluster_samples[,g] ~ as.factor(status_red), family='poisson');
pval_otu_red[g] <- summary(out)$coefficients[2,4]
}
warnings()
pval_otu_red
pval_otu_green <- array(0,dim(green_cluster_samples)[2]);
for(g in 1:dim(green_cluster_samples)[2])
{
out <- glm(green_cluster_samples[,g] ~ as.factor(status_green), family='poisson');
pval_otu_green[g] <- summary(out)$coefficients[2,4]
}
pval_otu_green
suppressMessages(suppressWarnings(library(limma)))
counts_filtered_voom <- voom(counts_filtered)$E;
dim(counts_filtered_voom)
dim(counts_filtered)
red_cluster_samples_voom <- voom(red_cluster_samples)$E;
g=1
out <- lm(red_cluster_samples_voom[,g] ~ as.factor(status_red));
out
summary(out)$coefficients[2,4]
summary(out)
pval_otu_green <- array(0,dim(green_cluster_samples)[2]);
green_cluster_samples_voom <- voom(green_cluster_samples)$E;
for(g in 1:dim(green_cluster_samples)[2])
{
out <- lm(green_cluster_samples_voom[,g] ~ as.factor(status_green));
pval_otu_green[g] <- summary(out)$coefficients[2,4]
}
warnings()
pval_otu_green
green_cluster_samples_voom[,1849]
green_cluster_samples[,1849]
green_cluster_samples_voom[,1849]
g <- 1849
out <- lm(green_cluster_samples_voom[,g] ~ as.factor(status_green));
out
summary(out)
out <- lm(green_cluster_samples_voom[,g] ~ as.factor(status_green));
if(summary(out)$coefficients[2,1] > 1e-10)
pval_otu_green[g] <- summary(out)$coefficients[2,4]
else
pval_otu_green[g]<- 1
out <- lm(green_cluster_samples_voom[,g] ~ as.factor(status_green));
if(summary(out)$coefficients[2,1] > 1e-10){
pval_otu_green[g] <- summary(out)$coefficients[2,4]
}else{
pval_otu_green[g]<- 1
}
pval_otu_green[g]
pval_otu_green <- array(0,dim(green_cluster_samples)[2]);
green_cluster_samples_voom <- voom(green_cluster_samples)$E;
for(g in 1:dim(green_cluster_samples)[2])
{
out <- lm(green_cluster_samples_voom[,g] ~ as.factor(status_green));
if(summary(out)$coefficients[2,1] > 1e-10){
pval_otu_green[g] <- summary(out)$coefficients[2,4]
}else{
pval_otu_green[g]<- 1
}
}
plot(pval_otu_red,pch=21,lwd=2, bty="l",ylab="admix proportion of red cluster",xlab="Age at collection")
plot(pval_otu_green,pch=21,lwd=2, bty="l",ylab="admix proportion of red cluster",xlab="Age at collection")
ord = order(pData(cellPaper)$Age_at_Collection,increasing=TRUE)
ord = order(pData(cellPaper)$Age_at_Collection,decreasing=TRUE)
cellPaper = cellPaper[,ord]
green_second_index <- which(pval_otu_green < 0.001);
green_second_index
green_cluster_samples_filtered <- green_cluster_samples[,green_second_index];
dim(green_cluster_samples_filtered)
green_second_index <- which(pval_otu_green < 0.001);
green_cluster_samples_filtered <- green_cluster_samples[,green_second_index];
status_green_filtered <- status_green[green_second_index];
samp_metadata <- cbind.data.frame(status_green_filtered);
colnames(samp_metadata) = c("Status");
samp_metadata
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
status_green
green_second_index <- which(pval_otu_green < 0.001);
green_cluster_samples_filtered <- green_cluster_samples[,green_second_index];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(green_cluster_samples_filtered,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster/imp_features_2'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
dim(samp_metadata)
dim(green_cluster_samples_filtered)
nclus_vec <- 2:4
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(green_cluster_samples_filtered, nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster/imp_features_2'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
num
metadata_vec <- samp_metadata[,num];
metadata_ordered <- metadata_vec[order(metadata_vec)];
metadata_vec
tol < - 0.001
tol <- 0.001
Topic_clus <- topics(green_cluster_samples_filtered, K=2, tol=tol);
docweights <- Topic_clus$omega;
docweights_ordered <- docweights[order(metadata_vec),];
metadata_vec
docweights_ordered <- docweights[order(metadata_vec),];
order(metadata_vec)
dim(docweights)
data <- green_cluster_samples_filtered
dim(data)
which(apply(data,1,max)==0)
install_github('kkdey/CountClust')
library(devtools)
install_github('kkdey/CountClust')
library(CountClust)
green_second_index <- which(pval_otu_green < 0.001);
green_cluster_samples_filtered <- green_cluster_samples[,green_second_index];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
nclus_vec <- 2
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(green_cluster_samples_filtered, nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster/imp_features_2'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
indices_blank <- as.numeric(which(apply(data,1,max)==0));
data <- data[-indices_blank,];
samp_metadata <- samp_metadata[-indices_blank,];
batch_lab <- batch_lab[-indices_blank];
samp_metadata
num_metadata <- dim(samp_metadata)[2];
num_metadata
dim(samp_metadata)
samp_metadata <- cbind.data.frame(status_green);
dim(samp_metadata)
colnames(samp_metadata) = c("Status");
dim(samp_metadata)
green_second_index <- which(pval_otu_green < 0.001);
green_cluster_samples_filtered <- green_cluster_samples[,green_second_index];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
nclus_vec <- 2
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(green_cluster_samples_filtered, nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster/imp_features_2'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
dim(samp_metadata'')
dim(samp_metadata)
num_metadata <- dim(samp_metadata)[2];
num_metadata
indices_blank
samp_metadata <- samp_metadata[-indices_blank,];
dim(samp_metadata)
indices_blank <- as.numeric(which(apply(data,1,max)==0));
data <- as.matrix(data[-indices_blank,]);
samp_metadata <- as.matrix(samp_metadata[-indices_blank,]);
batch_lab <- as.matrix(batch_lab[-indices_blank]);
green_second_index <- which(pval_otu_green < 0.001);
green_cluster_samples_filtered <- green_cluster_samples[,green_second_index];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
nclus_vec <- 2
data <- green_cluster_samples_filtered
indices_blank <- as.numeric(which(apply(data,1,max)==0));
data <- as.matrix(data[-indices_blank,]);
samp_metadata <- as.matrix(samp_metadata[-indices_blank,]);
batch_lab <- as.matrix(batch_lab[-indices_blank]);
dim(samp_metadata)
dim(data)
data[1:5,1:5]
green_second_index <- which(pval_otu_green < 0.001);
green_cluster_samples_filtered <- green_cluster_samples[,green_second_index];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
nclus_vec <- 2
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(green_cluster_samples_filtered, nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster/imp_features_2'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
install_github('kkdey/CountClust')
library(CountClust)
green_second_index <- which(pval_otu_green < 0.001);
green_cluster_samples_filtered <- green_cluster_samples[,green_second_index];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
nclus_vec <- 2
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(green_cluster_samples_filtered, nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster/imp_features_2'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
batch_lab <- NULL
batch_lab <- as.vector(batch_lab[-indices_blank]);
batch_lab
indices_blank
install_github('kkdey/CountClust')
library(CountClust)
green_second_index <- which(pval_otu_green < 0.001);
green_cluster_samples_filtered <- green_cluster_samples[,green_second_index];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
nclus_vec <- 2
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(green_cluster_samples_filtered, nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster/imp_features_2'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
red_second_index <- which(pval_otu_red < 0.001);
red_cluster_samples_filtered <- red_cluster_samples[,red_second_index];
samp_metadata <- cbind.data.frame(status_red);
colnames(samp_metadata) = c("Status");
nclus_vec <- 2
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(red_cluster_samples_filtered, nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/red_cluster/imp_features_2'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
red_cluster_samples[1:5,1:5]
dim(red_cluster_samples_filtered)
data <- red_cluster_samples_filtered
topics(data, K=2, tol=tol);
Topic_clus <- topics(data, K=nclus, tol=tol);
docweights <- Topic_clus$omega;
Topic_clus <- topics(data, K=2, tol=tol);
docweights <- Topic_clus$omega;
num_metadata <- dim(samp_metadata)[2];
num <- 1
metadata_vec <- samp_metadata[,num];
metadata_ordered <- metadata_vec[order(metadata_vec)];
docweights_ordered <- docweights[order(metadata_vec),];
red_second_index <- which(pval_otu_red < 0.001);
red_cluster_samples_filtered <- red_cluster_samples[,red_second_index];
samp_metadata <- cbind.data.frame(status_red);
colnames(samp_metadata) = c("Status");
nclus_vec <- 2
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(red_cluster_samples_filtered, nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/red_cluster/imp_features_2'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
dim(samp_metadata)
dim(red_cluster_samples)
indices_blank <- as.numeric(which(apply(data,1,max)==0));
data <- as.matrix(data[-indices_blank,]);
samp_metadata <- as.matrix(samp_metadata[-indices_blank,]);
batch_lab <- as.vector(batch_lab[-indices_blank]);
indices_blank
dim(data)
length(indices_blank)
install_github('kkdey/CountClust')
library(CountClust)
red_second_index <- which(pval_otu_red < 0.001);
red_cluster_samples_filtered <- red_cluster_samples[,red_second_index];
samp_metadata <- cbind.data.frame(status_red);
colnames(samp_metadata) = c("Status");
nclus_vec <- 2
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(red_cluster_samples_filtered, nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/red_cluster/imp_features_2'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
setwd('/Users/kushal/Documents/metagenomics/project/cell_paper/')
suppressMessages(suppressWarnings(library(maptpx)))
suppressMessages(suppressWarnings(library(CountClust)))
suppressMessages(suppressWarnings(library(metagenomeSeq)))
suppressMessages(suppressWarnings(library(ashr)))
suppressMessages(suppressWarnings(library(qvalue)))
suppressMessages(suppressWarnings(library(limma)))
load("cellPaperRaw.rdata")
ord = order(pData(cellPaper)$Age_at_Collection,decreasing=FALSE)
cellPaper = cellPaper[,ord]
pheno_data <- pData(cellPaper); # phenotype data (there are 62 columns in this)
age = pData(cellPaper)$Age_at_Collection
status = pData(cellPaper)$Case_Control
gender =pData(cellPaper)$Gender;
counts = MRcounts(cellPaper);
counts <- t(counts);
counts_preprocess <- handleNA(counts)$data;
## Removing the sparse OTUs
counts_filtered <- RemoveSparseFeatures(counts_preprocess,0.99)$data;
omega <- as.matrix(read.table('Structure/batch_uncorrected/clus_2/omega_mat.txt'));
par(mfrow=c(1,1))
plot(omega[,1]~age,pch=21,lwd=2, bty="l",ylab="admix proportion of red cluster",xlab="Age at collection")
index_red <- which(omega[,1] > 0.9);
index_green <- which(omega[,1] < 0.1)
red_cluster_samples <- counts_filtered[index_red,];
green_cluster_samples <- counts_filtered[index_green,];
counts_new <- rbind(red_cluster_samples, green_cluster_samples);
status_new <- c(status[index_red], status[index_green]);
age_grp_new <- c(rep(1,length(index_red)),rep(2,length(index_green)));
omega <- as.matrix(read.table('Structure/batch_uncorrected/clus_2/omega_mat.txt'));
omega <- omega[ord,];
par(mfrow=c(1,1))
plot(omega[,1]~age,pch=21,lwd=2, bty="l",ylab="admix proportion of red cluster",xlab="Age at collection")
index_red <- which(omega[,1] > 0.9);
index_green <- which(omega[,1] < 0.1)
red_cluster_samples <- counts_filtered[index_red,];
green_cluster_samples <- counts_filtered[index_green,];
counts_new <- rbind(red_cluster_samples, green_cluster_samples);
status_new <- c(status[index_red], status[index_green]);
age_grp_new <- c(rep(1,length(index_red)),rep(2,length(index_green)));
omega <- as.matrix(read.table('Structure/batch_uncorrected/clus_2/omega_mat.txt'));
omega <- omega[ord,];
par(mfrow=c(1,1))
plot(omega[,1]~age,pch=21,lwd=2, bty="l",ylab="admix proportion of red cluster",xlab="Age at collection")
index_red <- which(omega[,1] > 0.9);
index_green <- which(omega[,1] < 0.1)
red_cluster_samples <- counts_filtered[index_red,];
green_cluster_samples <- counts_filtered[index_green,];
counts_new <- rbind(red_cluster_samples, green_cluster_samples);
status_new <- c(status[index_red], status[index_green]);
age_grp_new <- c(rep(1,length(index_red)),rep(2,length(index_green)));
age_grp_new
status_new
status = pData(cellPaper)$Case_Control
status[index_red]
status[index_green]
c(status[index_red], status[index_green])
status_new <- cbind.data.frame(status[index_red], status[index_green]);
status_new <- rbind.data.frame(status[index_red], status[index_green]);
status_new
rbind(status[index_red], status[index_green])
status
status[index_green]
status[index_red]
status
c(as.character(status[index_red]), as.character(status[index_green]))
status_new <- rbind(as.character(status[index_red]), as.character(status[index_green]));
status_new <- rbind.data.frame(as.character(status[index_red]), as.character(status[index_green]));
status_new
status_new <- cbind.data.frame(as.character(status[index_red]), as.character(status[index_green]));
status_new <- matrix(c(as.character(status[index_red]), as.character(status[index_green])),ncol=1);
dim(status_new)
status_new
age_grp_new
length(age_grp_new)
data <- counts_new;
cpm_data <- voom(data)$E;
batch_removed_cpm <- matrix(0,dim(cpm_data)[1], dim(cpm_data)[2]);
batch_removed_cpm <- mclapply(1:dim(cpm_data)[2],function(g)
{
out <- lm(cpm_data[,g] ~ batch_lab);
ll <- list("intercept"=out$coefficients[1],"res"=out$residuals);
return(ll)
}, mc.cores=detectCores())
g=1;
batch_lab <- as.factor(age_grp_new)
out <- lm(cpm_data[,g] ~ batch_lab);
out
out$coefficients[1]
out$residuals
mclapply(1:dim(cpm_data)[2],function(g)
{
out <- lm(cpm_data[,g] ~ batch_lab);
ll <- list("intercept"=out$coefficients[1],"res"=out$residuals);
return(ll)
}, mc.cores=detectCores())
batch_removed_cpm <- mclapply(1:dim(cpm_data)[2],function(g)
{
out <- lm(cpm_data[,g] ~ batch_lab);
ll <- list("intercept"=out$coefficients[1],"res"=out$residuals);
return(ll)
}, mc.cores=detectCores())
dim(batch_removed_cpm)
batch_removed_cpm
cpm_data <- log(data+0.5);
dim(cpm_data)
exp(out$coefficients[1] + out$residuals)
g
data[,g]
cpm_data <- log(data+0.5);
out <- lm(cpm_data[,g] ~ batch_lab);
out
exp(out$coefficients[1] + out$residuals)
data[,1]
out$coefficients
exp(out$coefficients[1] + mean(out$coefficients[-1])+out$residuals)
exp(out$coefficients[1] + mean(out$coefficients[-1])+out$residuals-0.5)
exp(out$coefficients[1] + mean(out$coefficients[-1])+out$residuals)-0.5
round(exp(out$coefficients[1] + mean(out$coefficients[-1])+out$residuals)-0.5)
batch_removed_cpm <- do.call(cbind, mclapply(1:dim(cpm_data)[2],function(g)
{
out <- lm(cpm_data[,g] ~ batch_lab);
return(round(exp(out$coefficients[1] + mean(out$coefficients[-1])+out$residuals)-0.4));
}, mc.cores=detectCores()));
dim(batch_removed_cpm)
if (dim(batch_removed_cpm)[2]!=dim(cpm_data)[2])
stop("The batch corrected data is not of same dimension as the counts data : try changing use_parallel")
