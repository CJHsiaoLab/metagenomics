for ( l in 1:L)
{
smpl=matrix(0,nsamples,d);
smpl[1,]=rnorm(d,10,1);
i=2;
counter1=0;
while (i<=nsamples)
{
epsilon= rmvnorm(1,mu1,Sigma1);
y= smpl[(i-1),]+epsilon;
accept_rate= min(1,exp(pdf1(y)-pdf1(smpl[(i-1),])));
w=runif(1);
if (w<accept_rate)
{
smpl[i,]=y;
i=i+1;
counter1=counter1+1;
}
else  {
smpl[i,]=smpl[(i-1),];
i=i+1;   }
}
# General[1,l,,]=apply(smpl,c(1,2),b1$inverse);
Mult_General[1,l,,]=smpl;
}
#####################  TMCMC  with diffeomorphism  ######################
for ( l in 1:L)
{
smpl=matrix(0,nsamples,d);
smpl[1,]=rnorm(d,10,1);
i=2;
counter2=0;
while (i<=nsamples)
{
epsilon= abs(rnorm(1,mu1[1],Sigma1[1,1]));
y=array(0,d);
for (j in 1:d)
{
w=runif(1)
if(w<0.5)
{y[j]= smpl[(i-1),j]+epsilon;}
else {y[j]= smpl[(i-1),j]-epsilon;}
}
accept_rate= min(1,exp(pdf1(t(y))-pdf1(t(smpl[(i-1),]))));
w=runif(1);
if (w<accept_rate)
{
smpl[i,]=y;
i=i+1;
counter2=counter2+1;
}
else  {
smpl[i,]=smpl[(i-1),];
i=i+1;   }
}
# General[2,l,,]=apply(smpl,c(1,2),b1$inverse);
Mult_General[2,l,,]=smpl;
}
#############   Computing the KS  Statistic  compare ######################
KSval_TMCMC=array(0,nsamples);
KSval_MCMC=array(0,nsamples);
for(d in 1:40)
{
for(n in 1:nsamples)
{
simulate.vec=b1$transform(rt(L,df=1));
KSval_TMCMC[n]=ks.test(Mult_General[2,,n,d],simulate.vec)$statistic;
KSval_MCMC[n]=ks.test(Mult_General[1,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_TMCMC,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_MCMC,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("TMCMC","RWMH"),fill=c("red","blue"),border="black");
}
source('~/Documents/tmcmc/TMCMC_GEOMETRIC_ERGODICITY3/Brazilian_Journal_revision (2)/Rcodes/Diffeomorphism_Mult_Cauchy_RWMH_TMCMC.R')
install.packages("RnaSeqTutorial")
install.packages("RnaSeqTutorial")
source("http://bioconductor.org/biocLite.R")
biocLite("RnaSeqTutorial")
source("http://bioconductor.org/biocLite.R")
biocLite("ShortRead")
library(ShortRead)
library(Rsamtools)
source("http://bioconductor.org/biocLite.R")
biocLite("BSgenome.Dmelanogaster.UCSC.dm3")
library(BSgenome.Dmelanogaster.UCSC.dm3)
library(genomeInterval)
source("http://bioconductor.org/biocLite.R")
biocLite("genomeInterval")
install.packages('genomeInterval')
setwd('/Users/kushal/Documents/metagenomics/src');
suppressMessages(suppressWarnings(library(metagenomeSeq)))
suppressMessages(suppressWarnings(library(maptpx)))
suppressMessages(suppressWarnings(library(metagenomeSeq)))
suppressMessages(suppressWarnings(library(maptpx)))
suppressMessages(suppressWarnings(library(tsne)))
suppressMessages(suppressWarnings(library(qtlcharts)))
#setwd('/Users/kushal/Documents/metagenomics/src')
load('../data/HMPvs35_nt100_MRexperiment.rdata')
data <- t(MRcounts(hmp));
metadata <- pData(hmp);
otu_data <- featureData(hmp)
hands_data <- data[which(metadata$HMPbodysupersite=="Skin"),];
metadata <- metadata[which(metadata$HMPbodysupersite=="Skin"),];
str(metadata)
pr <- prcomp(hands_data%*%t(hands_data));
dim(pr)
pr
pr$rotation[,1]
plot(pr$rotation[,1], pr$rotation[,2])
plot(pr$rotation[,2], pr$rotation[,3])
plot(pr$x[,2], pr$x[,3])
plot(pr$x[,1], pr$x[,2])
plot(pr)
plot(pr$x[,1], pr$x[,2])
pr <- prcomp(log(hands_data+0.5)%*%t(log(hands_data+0.5)));
plot(pr)
plot(pr$x[,1], pr$x[,2])
plot(pr$x[,1], pr$x[,2], col=as.numeric(as.factor(type_bodysite)))
type_bodysite <- metadata$HMPbodysubsite;
plot(pr$x[,1], pr$x[,2], col=as.numeric(as.factor(type_bodysite)))
suppressWarnings(suppressMessages(iplot(pr$x[,1], pr$x[,2], as.numeric(as.factor(type_bodysite)),type_bodysite)))
suppressWarnings(suppressMessages(iplot(pr$x[,1], pr$x[,3], as.numeric(as.factor(type_bodysite)),type_bodysite)))
suppressWarnings(suppressMessages(iplot(pr$x[,2], pr$x[,3], as.numeric(as.factor(type_bodysite)),type_bodysite)))
suppressWarnings(suppressMessages(iplot(pr$x[,1], pr$x[,3], as.numeric(as.factor(type_bodysite)),type_bodysite)))
full_data <- data;
metadata <- pData(hmp);
type_bodysite <- metadata$HMPbodysubsite;
structure_hands_metagenome <- function(counts_data,type_info,K)
{
Topic_Clus <- topics(counts_data,K,tol=0.0001);
write.table(Topic_Clus$omega,paste0('../internal_data/body_data/topics_omega_',K,'.txt'));
write.table(Topic_Clus$theta,paste0('../internal_data/body_data/topics_theta_',K,'.txt'));
docweights <- as.matrix(read.table(paste0('../internal_data/body_data/topics_omega_',K,'.txt')));
type_ordered <- type_info[order(type_info)];
docweights_ordered <- docweights[order(type_info),];
barplot(t(docweights_ordered),col=2:(K+1),axisnames=F,space=0,border=NA,main=paste("No. of clusters=",K),las=1,ylim=c(0,1),cex.axis=0.3,cex.main=1.4);
labels = match(unique(type_ordered), type_ordered);
abline(v=labels-1)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights_ordered)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(type_ordered),las=2,cex.axis=0.3);
}
full_data <- data;
metadata <- pData(hmp);
type_bodysite <- metadata$HMPbodysubsite;
structure_body_metagenome <- function(counts_data,type_info,K)
{
Topic_Clus <- topics(counts_data,K,tol=0.0001);
write.table(Topic_Clus$omega,paste0('../internal_data/body_data/topics_omega_',K,'.txt'));
write.table(Topic_Clus$theta,paste0('../internal_data/body_data/topics_theta_',K,'.txt'));
docweights <- as.matrix(read.table(paste0('../internal_data/body_data/topics_omega_',K,'.txt')));
type_ordered <- type_info[order(type_info)];
docweights_ordered <- docweights[order(type_info),];
barplot(t(docweights_ordered),col=2:(K+1),axisnames=F,space=0,border=NA,main=paste("No. of clusters=",K),las=1,ylim=c(0,1),cex.axis=0.3,cex.main=1.4);
labels = match(unique(type_ordered), type_ordered);
abline(v=labels-1)
labels_low=labels-1;
labels_up=c(labels_low[2:length(labels_low)],dim(docweights_ordered)[1]);
mid_point <- labels_low +0.5*(labels_up-labels_low);
axis(1,at=mid_point, unique(type_ordered),las=2,cex.axis=0.3);
}
lapply(c(3,5,7), function(n) structure_body_metagenome(data,type_bodysite,n));
e=read.csv("http://rafalab.jhsph.edu/688/expression.csv",row.names=1)
e=log2(e) # log2 transform
m1=rowMeans(e[,1:3]) # group 1
m2=rowMeans(e[,4:6]) # group 2
a=rowMeans(e)
which.min(m2-m1)
grp = rep(1:2, each=3)
o=order(m2-m1)
rownames(e)[o[1:10]]
source("http://bioconductor.org/biocLite.R")
biocLite("genefilter")
s1=rowSds(e[,1:3])
s2=rowSds(e[,4:6])
ttest=(m2-m1)/sqrt(s1^2/3 + s2^2/3)
pval=2*(1-pt(abs(ttest),4))
plot(m2-m1, -log10(pval), main="volcano",xlab="Effect size",ylab="-log10(pvalue)")
smoothScatter(m2-m1, -log10(pval), main="volcano",xlab="Effect size",ylab="-log10(pvalue)")
tt = rowttests(as.matrix(e),factor(grp))
design <- cbind(Grp1=1,Grp2vs1=c(0,0,0,1,1,1))
fit <- lmFit(as.matrix(e),design);
ebayes_fit <- ebayes(fit);
ebayes_fit.pvalue <- ebayes_fit$p.value[,2];
smoothScatter(m2-m1, -log10(ebayes_fit.pvalue), main="volcano",xlab="Effect size",ylab="-log10(pvalue)")
e <- as.matrix(e);
betahat <- array(0,dim(e)[1]);
sebetahat <- array(0, dim(e)[1]);
for(g in 1:dim(e)[1])
{
out <- summary(lm(e[g,]~as.factor(grp)));
betahat[g] <- as.numeric(out$coefficients[2,1]);
sebetahat[g] <- as.numeric(out$coefficients[2,2])
}
e=read.csv("http://rafalab.jhsph.edu/688/expression.csv",row.names=1)
e=log2(e) # log2 transform
m1=rowMeans(e[,1:3]) # group 1
m2=rowMeans(e[,4:6]) # group 2
a=rowMeans(e)
which.min(m2-m1)
grp = rep(1:2, each=3)
o=order(m2-m1)
rownames(e)[o[1:10]]
#source("http://bioconductor.org/biocLite.R")
#biocLite("genefilter")
library(genefilter)
library(limma)
s1=rowSds(e[,1:3])
s2=rowSds(e[,4:6])
ttest=(m2-m1)/sqrt(s1^2/3 + s2^2/3)
pval=2*(1-pt(abs(ttest),4))
plot(m2-m1, -log10(pval), main="volcano",xlab="Effect size",ylab="-log10(pvalue)")
smoothScatter(m2-m1, -log10(pval), main="volcano",xlab="Effect size",ylab="-log10(pvalue)")
tt = rowttests(as.matrix(e),factor(grp))
design <- cbind(Grp1=1,Grp2vs1=c(0,0,0,1,1,1))
fit <- lmFit(as.matrix(e),design);
ebayes_fit <- ebayes(fit);
ebayes_fit.pvalue <- ebayes_fit$p.value[,2];
smoothScatter(m2-m1, -log10(ebayes_fit.pvalue), main="volcano",xlab="Effect size",ylab="-log10(pvalue)")
e <- as.matrix(e);
betahat <- array(0,dim(e)[1]);
sebetahat <- array(0, dim(e)[1]);
for(g in 1:dim(e)[1])
{
out <- summary(lm(e[g,]~as.factor(grp)));
betahat[g] <- as.numeric(out$coefficients[2,1]);
sebetahat[g] <- as.numeric(out$coefficients[2,2])
}
res <- ash(betahat,sebetahat,mixcompdist="normal")
smoothScatter(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)",nbin=128)
library(ashr)
res <- ash(betahat,sebetahat,mixcompdist="normal")
?"ashr-package"
res <- ash(betahat,sebetahat,mixcompdist="normal",control=list(maxiter=200))
res <- ash(betahat,sebetahat,mixcompdist="normal",control=list(maxiter=2000))
smoothScatter(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)",nbin=128)
smoothScatter(m2-m1, -log10(pval), main="volcano",xlab="Effect size",ylab="-log10(pvalue)",nbins=128)
smoothScatter(m2-m1, -log10(pval), main="volcano",xlab="Effect size",ylab="-log10(pvalue)",nbin=128)
warnings()
tt = rowttests(as.matrix(e),factor(grp))
smoothScatter(m2-m1, -log10(pval), main="volcano",xlab="Effect size",ylab="-log10(pvalue)",nbin=128)
smoothScatter(m2-m1, -log10(ebayes_fit.pvalue), main="volcano",xlab="Effect size",ylab="-log10(pvalue)",nbin=128)
smoothScatter(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)",nbin=128)
smoothScatter(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)",nbin=0)
smoothScatter(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)",nbin=1)
smoothScatter(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)",nbin=10)
plot(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)")
plot(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)",pch=19)
plot(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)",pch=19,cex=0.2,lwd=1)
plot(m2-m1, -log10(ebayes_fit.pvalue), main="volcano",xlab="Effect size",ylab="-log10(pvalue)",pch=19,cex=0.2,lwd=1)
plot(m2-m1, -log10(pval), main="volcano",xlab="Effect size",ylab="-log10(pvalue)",pch=19,cex=0.2,lwd=1)
plot(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)",pch=19,cex=0.2,lwd=1)
read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt');
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1)
legend("topleft",col=1:3,legend=c("0 match","1 match","2 match"),fill=1:3)
phase_mat <- read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt');
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1)
legend("topleft",col=1:3,legend=c("0 match","1 match","2 match"),fill=1:3)
phase_mat_vec
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
dim(phase_mat)
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
dim(out)
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1)
legend("topleft",col=1:3,legend=c("0 match","1 match","2 match"),fill=1:3)
table(phase_mat_vec)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1)
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1, main="Phase diagram: no. of genes=50")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
plot(out[,1],out[,2],col=phase_mat_vec+1, main=paste0("Phase diagram: no. of genes=",G))
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab=alpha(topic prop fluc),
ylab=gamma(freq fluc))
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
G=100;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
G=100;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
G=200;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
G=200;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
G=200;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
G=100;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
phase_mat1 <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
phase_mat==phase_mat1
library(data.table)
install.packages("data.table")
install.packages("plyr")
install.packages("data.table")
install_github('kkdey/tmcmcR')
library(devtools)
install_github('kkdey/tmcmcR')
install_github('kkdey/tmcmcR')
library(metrop)
install_github('kkdey/tmcmcR')
setwd('/Users/kushal/Documents/metagenomics/project/cell_paper/')
suppressMessages(suppressWarnings(library(maptpx)))
suppressMessages(suppressWarnings(library(CountClust)))
suppressMessages(suppressWarnings(library(metagenomeSeq)))
load("cellPaperRaw.rdata")
pheno_data <- pData(cellPaper); # phenotype data (there are 62 columns in this)
age = pData(cellPaper)$Age_at_Collection
status = pData(cellPaper)$Case_Control
gender =pData(cellPaper)$Gender;
omega <- as.matrix(read.table('Structure/batch_uncorrected/clus_2/omega_mat.txt'));
par(mfrow=c(1,1))
plot(omega[,1]~age,pch=21,lwd=2, bty="l",ylab="admix proportion of red cluster",xlab="Age at collection")
index_red <- which(omega[,1] > 0.9);
index_green <- which(omega[,1] < 0.1)
counts = MRcounts(cellPaper);
counts <- t(counts);
counts_preprocess <- handleNA(counts)$data;
## Removing the sparse OTUs
counts_filtered <- RemoveSparseFeatures(counts_preprocess,0.99)$data;
red_cluster_samples <- counts_filtered[index_red,];
green_cluster_samples <- counts_filtered[index_green,];
nclus_vec <- 2;
bayesfac <- array(0,length(nclus_vec));
status_red <- status[index_red];
samp_metadata <- cbind.data.frame(status_red);
colnames(samp_metadata) = c("Status");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(red_cluster_samples,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/red_cluster'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=300));
}
nclus_vec <- 2;
bayesfac <- array(0,length(nclus_vec));
status_red <- status[index_red];
samp_metadata <- cbind.data.frame(status_red);
colnames(samp_metadata) = c("Status");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(red_cluster_samples,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/red_cluster'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
nclus_vec <- 2;
bayesfac <- array(0,length(nclus_vec));
status_green <- status[index_green];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(green_cluster_samples,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
betaval_otu <- array(0,dim(counts_filtered)[2]);
sd_betaval_otu <- array(0,dim(counts_filtered)[2]);
pval_otu <- array(0,dim(counts_filtered)[2]);
for(g in 1:dim(counts_filtered)[2])
{
out <- glm(counts_filtered[,g] ~ age + as.factor(status), family='poisson');
betaval_otu[g] <- summary(out)$coefficients[3,1];
sd_betaval_otu[g] <- summary(out)$coefficients[3,2]
pval_otu[g] <- summary(out)$coefficients[3,4]
}
library(ashr)
effect_size <- ash(betaval_otu, sd_betaval_otu, mixcompdist = "normal")$PosteriorMean;
plot(effect_size,pch=21,lwd=2, bty="l",ylab="shrunk effect sizes (ash)",xlab="Features")
library(qvalue)
qval_otu <- qvalue(pval_otu)$qvalues;
pval_otu <- pval_otu;
plot(qval_otu ~ pval_otu,pch=21,lwd=2, bty="l",ylim=c(0,1),ylab="q values",xlab=" p values")
feature_indices <- which(qval_otu <0.0001);
counts_feature_status <- counts_filtered[, feature_indices];
nclus_vec <- 2:4;
if(!dir.exists("Structure")) dir.create("Structure")
if(!dir.exists("Structure/imp_features")) dir.create("Structure/imp_features")
bayesfac <- array(0,length(nclus_vec));
age = pData(cellPaper)$Age_at_Collection
status = pData(cellPaper)$Case_Control
gender =pData(cellPaper)$Gender;
samp_metadata <- cbind.data.frame(age,status,gender);
colnames(samp_metadata) = c("Age","Status","Gender");
for(num in 1:length(nclus_vec))
{
if(!dir.exists(paste0("Structure/imp_features/clus_",nclus_vec[num]))) dir.create(paste0("Structure/imp_features/clus_",nclus_vec[num]))
obj <- StructureObj(counts_feature_status,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0("Structure/imp_features/clus_",nclus_vec[num]),
partition=c('FALSE','TRUE','TRUE'),
control = list(lwd=3,struct.width=600, struct.height=400));
}
omega <- as.matrix(read.table('Structure/imp_features/clus_2/omega_mat.txt'));
par(mfrow=c(1,1))
plot(omega[,1]~age,pch=21,lwd=2, bty="l",ylab="admix proportion of red cluster",xlab="Age at collection")
index_red <- which(omega[,1] > 0.9);
index_green <- which(omega[,1] < 0.1)
dim(omega)
index_red <- which(omega[,1] > 0.9);
index_green <- which(omega[,1] < 0.1)
red_cluster_samples <- counts_feature_status[index_red,];
green_cluster_samples <- counts_feature_status[index_green,];
dim(red_cluster_samples)
dim(green_cluster_samples)
nclus_vec <- 2;
bayesfac <- array(0,length(nclus_vec));
status_red <- status[index_red];
samp_metadata <- cbind.data.frame(status_red);
colnames(samp_metadata) = c("Status");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(red_cluster_samples,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/red_cluster/imp_features'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
nclus_vec <- 2;
bayesfac <- array(0,length(nclus_vec));
status_green <- status[index_green];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(red_cluster_samples,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster/imp_features'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
nclus_vec <- 2;
bayesfac <- array(0,length(nclus_vec));
status_green <- status[index_green];
samp_metadata <- cbind.data.frame(status_green);
colnames(samp_metadata) = c("Status");
for(num in 1:length(nclus_vec))
{
obj <- StructureObj(green_cluster_samples,nclus_vec[num],samp_metadata = samp_metadata, tol=0.001, batch_lab = NULL, path=paste0('post_Structure/green_cluster/imp_features'), partition=c('TRUE'),
control=list(lwd=3,struct.width=600, struct.height=400));
}
